{"remainingRequest":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/javi/Escritorio/TFG - Web/tfg-web/src/views/manageGaraje/usersRequest/UsersRequest-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/src/views/manageGaraje/usersRequest/UsersRequest-list.vue","mtime":1579198511449},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n    // Models\n    import PersonalUser from '../../../models/user/personalUser'\n\n    // Child components\n    import UsersRequestForm from './UsersRequest-form'\n\n    export default {\n        components: {UsersRequestForm},\n        data () {\n            return {\n                isEnableAcceptForm: false,\n                isEnableDenyForm: false,\n                infoToAcceptForm: {},\n                loadingListRequest: true,\n                search: '',\n                headers: [\n                    {\n                        text: 'Name',\n                        align: 'left',\n                        value: 'name',\n                    },\n                    {   text: 'Actions',\n                        value: 'action',\n                        sortable: false,\n                        align: 'center',\n                    },\n                ],\n                usersRequest: [\n                    // {\n                    //     name: 'Frozen Yogurt',\n                    // },\n                    // {\n                    //     name: 'Pepe',\n                    // },\n                ],\n            }\n        },\n\n        created() {\n            this.getRequestList()\n        },\n\n        computed:{\n\t\t\t/**\n\t\t\t * Determine if a user is logged in the app.\n\t\t\t */\n\t\t\tuserLogged(){\n\t\t\t\treturn this.$store.state.session.user\n            }\n\n        },\n\n        methods: {\n\n            async confirmRequest(item) {\n                let itemIndex = this.usersRequest.indexOf(item)\n                console.log(itemIndex, this.usersRequest[itemIndex].name)\n\n                const userName = this.usersRequest[itemIndex].name\n                const uid = this.usersRequest[itemIndex].uid\n                const numberOccupiedParking = await this.userLogged.getNumberOfOccupiedParkingSpaces()\n                const totalParkingSpaces = this.userLogged.parkingSpaces\n\n                this.infoToAcceptForm = { userName: userName, uid: uid, numberOccupiedParking: numberOccupiedParking, totalParkingSpaces: Number(totalParkingSpaces)}\n                console.log(this.infoToAcceptForm)\n                this.isEnableAcceptForm = true\n                //this.usersRequest[itemIndex].status = true\n            },\n\n            denyRequest(item) {\n                let itemIndex = this.usersRequest.indexOf(item)\n                console.log(itemIndex)\n\n                this.isEnableDenyForm = true\n                //this.usersRequest[itemIndex].status = false\n            },\n\n            async getRequestList(){\n                this.usersRequest = []\n                this.loadingListRequest = true\n                await this.sleep(1500) \n                await this.userLogged.getUsersRequest().then( usersRequest => {\n                    for (const request of usersRequest){\n                        let personalUser = new PersonalUser({\n                            nick: undefined,\n                            name: undefined,\n                            lastName: undefined,\n                            country: undefined,\n                        })\n                        personalUser.getPersonalUserByUID(request.uid).then( userInfo => {\n                            this.usersRequest.push({name: userInfo.name, uid: request.uid})\n                        })\n                    }\n                })\n                this.loadingListRequest = false\n            },\n\n            /**\n             * Event called by childs.\n             */\n            disableAcceptForm() {\n                this.isEnableAcceptForm=false\n                this.getRequestList()\n            },\n\n            /** Simulates a response wait from the backend\n             * @param {Number} ms time to sleep.\n             * @return {Promise}\n             */\n            sleep(ms) {\n                return new Promise(resolve => setTimeout(resolve, ms));\n            }\n        }\n    }\n",{"version":3,"sources":["UsersRequest-list.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"UsersRequest-list.vue","sourceRoot":"src/views/manageGaraje/usersRequest","sourcesContent":["<template>\n    <v-container> \n        <v-card flat>\n            <v-card-title>\n                List of user's request\n                <v-spacer></v-spacer>\n                <v-text-field\n                    v-model=\"search\"\n                    append-icon=\"mdi-magnify\"\n                    label=\"Search\"\n                    single-line\n                    hide-details\n                ></v-text-field>                                    \n            </v-card-title>\n\n            <v-data-table\n                :loading=\"loadingListRequest\" loading-text=\"Loading... Please wait\"\n                :headers=\"headers\"\n                :items=\"usersRequest\"\n                :search=\"search\">                                            \n                    <template v-slot:item.action=\"{ item }\">\n                        <v-btn color=\"red darken-1\" text @click=\"denyRequest(item)\">DENY</v-btn>                        \n                        <v-btn color=\"green darken-1\" text @click=\"confirmRequest(item)\">ACCEPT</v-btn>\n                    </template>\n            </v-data-table>\n        </v-card>\n\n        <UsersRequestForm \n            :enableAcceptForm=\"isEnableAcceptForm\" \n            @disableAcceptForm=\"disableAcceptForm\"\n            :enableDenyForm=\"isEnableDenyForm\" \n            @disableDenyForm=\"isEnableDenyForm=false\"\n            :infoToAcceptForm=\"infoToAcceptForm\">\n        </UsersRequestForm>\n    </v-container>\n</template>\n\n<script>\n\n    // Models\n    import PersonalUser from '../../../models/user/personalUser'\n\n    // Child components\n    import UsersRequestForm from './UsersRequest-form'\n\n    export default {\n        components: {UsersRequestForm},\n        data () {\n            return {\n                isEnableAcceptForm: false,\n                isEnableDenyForm: false,\n                infoToAcceptForm: {},\n                loadingListRequest: true,\n                search: '',\n                headers: [\n                    {\n                        text: 'Name',\n                        align: 'left',\n                        value: 'name',\n                    },\n                    {   text: 'Actions',\n                        value: 'action',\n                        sortable: false,\n                        align: 'center',\n                    },\n                ],\n                usersRequest: [\n                    // {\n                    //     name: 'Frozen Yogurt',\n                    // },\n                    // {\n                    //     name: 'Pepe',\n                    // },\n                ],\n            }\n        },\n\n        created() {\n            this.getRequestList()\n        },\n\n        computed:{\n\t\t\t/**\n\t\t\t * Determine if a user is logged in the app.\n\t\t\t */\n\t\t\tuserLogged(){\n\t\t\t\treturn this.$store.state.session.user\n            }\n\n        },\n\n        methods: {\n\n            async confirmRequest(item) {\n                let itemIndex = this.usersRequest.indexOf(item)\n                console.log(itemIndex, this.usersRequest[itemIndex].name)\n\n                const userName = this.usersRequest[itemIndex].name\n                const uid = this.usersRequest[itemIndex].uid\n                const numberOccupiedParking = await this.userLogged.getNumberOfOccupiedParkingSpaces()\n                const totalParkingSpaces = this.userLogged.parkingSpaces\n\n                this.infoToAcceptForm = { userName: userName, uid: uid, numberOccupiedParking: numberOccupiedParking, totalParkingSpaces: Number(totalParkingSpaces)}\n                console.log(this.infoToAcceptForm)\n                this.isEnableAcceptForm = true\n                //this.usersRequest[itemIndex].status = true\n            },\n\n            denyRequest(item) {\n                let itemIndex = this.usersRequest.indexOf(item)\n                console.log(itemIndex)\n\n                this.isEnableDenyForm = true\n                //this.usersRequest[itemIndex].status = false\n            },\n\n            async getRequestList(){\n                this.usersRequest = []\n                this.loadingListRequest = true\n                await this.sleep(1500) \n                await this.userLogged.getUsersRequest().then( usersRequest => {\n                    for (const request of usersRequest){\n                        let personalUser = new PersonalUser({\n                            nick: undefined,\n                            name: undefined,\n                            lastName: undefined,\n                            country: undefined,\n                        })\n                        personalUser.getPersonalUserByUID(request.uid).then( userInfo => {\n                            this.usersRequest.push({name: userInfo.name, uid: request.uid})\n                        })\n                    }\n                })\n                this.loadingListRequest = false\n            },\n\n            /**\n             * Event called by childs.\n             */\n            disableAcceptForm() {\n                this.isEnableAcceptForm=false\n                this.getRequestList()\n            },\n\n            /** Simulates a response wait from the backend\n             * @param {Number} ms time to sleep.\n             * @return {Promise}\n             */\n            sleep(ms) {\n                return new Promise(resolve => setTimeout(resolve, ms));\n            }\n        }\n    }\n</script>"]}]}