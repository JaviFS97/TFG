{"remainingRequest":"/home/javi/Escritorio/TFG/Web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/javi/Escritorio/TFG/Web/src/components/maps/MapGarajes.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/javi/Escritorio/TFG/Web/src/components/maps/MapGarajes.vue","mtime":1579291349342},{"path":"/home/javi/Escritorio/TFG/Web/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/javi/Escritorio/TFG/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/javi/Escritorio/TFG/Web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport mapboxgl from 'mapbox-gl'\n\n// Models\nimport OrganizationUser from '../../models/user/organizationUser'\n\nvar map = null\nwindow.followOID = []\n\nexport default {\n    props: ['organizations'],\n\n    data() {\n        return {\n            listOID: []\n        }\n    },\n\n    async mounted() {\n        mapboxgl.accessToken = 'pk.eyJ1IjoicHJ1ZWJhMSIsImEiOiJjazFpNm1kNDAwMzJhM2ltbmRwcXJxbzUyIn0.xp_6hLfEEPqJsPfQA4pmNg';\n        map = new mapboxgl.Map({\n            container: 'map', \n            style: 'mapbox://styles/mapbox/streets-v11', \n            zoom: 1 \n        });\n        \n        this.addControlToMap()\n        \n        await this.getOrganizationsInfo()\n\n    },\n\n    methods: {\n        creatingPopup(name, oid){\n            // create the popup\n            var popup = new mapboxgl.Popup({ offset: 25 }).setText(\n                name + \"'s garaje is here.\"\n            );\n\n            const description = \n                `\n                <div> \n                    <b> ${name} organization</b> \n                    <hr> \n                    <button style=\"margin-left: 5%; type=\"button\" id=\"${oid}\" \n                        onclick=\"\n                                    if(!window.followOID.includes('${oid}')){\n                                        window.followOID.push(this.id);\n                                    } \n                                \"> Follow</button>\n                    <button style=\"margin-left: 30%;\" type=\"button\" id=\"${oid}1\" \n                        onclick=\"   \n                                    if(window.followOID.includes('${oid}')){\n                                        window.followOID.splice(window.followOID.indexOf('${oid}'));\n                                    }  \n                                \"> Unfollow</button>\n                    <hr>  \n                </div>\n                `\n\n\n\n            popup.setHTML(description)\n\n            // create DOM element for the marker\n            var el = document.createElement('div');\n            return popup\n        },\n\n        addControlToMap(){\n            map.addControl(\n                new mapboxgl.GeolocateControl({\n                    positionOptions: {\n                        enableHighAccuracy: true\n                    },\n                    trackUserLocation: true\n                }),\n            );\n\n            // Add zoom and rotation controls to the map.\n            map.addControl(new mapboxgl.NavigationControl());\n        },\n\n        async getOrganizationsInfo(){\n            let instanceOrg = new OrganizationUser({\n                email: undefined,\n                password: undefined,\n                name: undefined,\n                parkingSpaces: undefined,\n                coordenates: undefined,\n            })\n\n            for (const org of this.organizations){\n                await instanceOrg.getOrganizationByOID(org.oid).then( orgByOID => {\n                    let o = {}\n                    o.oid = org.oid\n                    o.name = orgByOID.organizationName\n                    o.coordenates = [orgByOID.coordenateLNG, orgByOID.coordenateLAT]\n                    return o\n                }).then( orga => {\n                    //this.organizationINFO = org\n                    const popup = this.creatingPopup(orga.name, orga.oid)\n                    this.garajeDoor = new mapboxgl.Marker().setLngLat(orga.coordenates).setPopup(popup).addTo(map)\n                    this.listOID.push(orga.oid)\n                })\n            }                \n        },\n\n        /**\n         * Throw events to parents.\n         */\n        confirmForm(){\n            this.$emit('followOIDFromMap', window.followOID);\n        }, \n\n        /**\n         * Throw events to parents.\n         */\n        cancelForm(){\n            this.$emit('closeForm');\n        }, \n    },\n\n}\n\n",{"version":3,"sources":["MapGarajes.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAoBA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"MapGarajes.vue","sourceRoot":"src/components/maps","sourcesContent":["<template>\n    <v-container>\n        <div>\n            <script type=\"application/javascript\" src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.4.0/mapbox-gl.js'></script>\n            <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.4.0/mapbox-gl.css' rel='stylesheet' />\n            \n            <div id='map'></div>         \n        </div>        \n        <div class=\"test\">\n            <v-row justify=\"center\">                        \n                <v-btn color=\"red darken-1\" text @click=\"cancelForm\">Cancel</v-btn>\n                <v-btn color=\"green darken-1\" text @click=\"confirmForm\">Confirm</v-btn>\n            </v-row>\n        </div>\n    </v-container>\n\n</template>\n\n\n<script>\n    import mapboxgl from 'mapbox-gl'\n\n    // Models\n    import OrganizationUser from '../../models/user/organizationUser'\n\n    var map = null\n    window.followOID = []\n\n    export default {\n        props: ['organizations'],\n\n        data() {\n            return {\n                listOID: []\n            }\n        },\n\n        async mounted() {\n            mapboxgl.accessToken = 'pk.eyJ1IjoicHJ1ZWJhMSIsImEiOiJjazFpNm1kNDAwMzJhM2ltbmRwcXJxbzUyIn0.xp_6hLfEEPqJsPfQA4pmNg';\n            map = new mapboxgl.Map({\n                container: 'map', \n                style: 'mapbox://styles/mapbox/streets-v11', \n                zoom: 1 \n            });\n            \n            this.addControlToMap()\n            \n            await this.getOrganizationsInfo()\n\n        },\n\n        methods: {\n            creatingPopup(name, oid){\n                // create the popup\n                var popup = new mapboxgl.Popup({ offset: 25 }).setText(\n                    name + \"'s garaje is here.\"\n                );\n\n                const description = \n                    `\n                    <div> \n                        <b> ${name} organization</b> \n                        <hr> \n                        <button style=\"margin-left: 5%; type=\"button\" id=\"${oid}\" \n                            onclick=\"\n                                        if(!window.followOID.includes('${oid}')){\n                                            window.followOID.push(this.id);\n                                        } \n                                    \"> Follow</button>\n                        <button style=\"margin-left: 30%;\" type=\"button\" id=\"${oid}1\" \n                            onclick=\"   \n                                        if(window.followOID.includes('${oid}')){\n                                            window.followOID.splice(window.followOID.indexOf('${oid}'));\n                                        }  \n                                    \"> Unfollow</button>\n                        <hr>  \n                    </div>\n                    `\n\n\n\n                popup.setHTML(description)\n\n                // create DOM element for the marker\n                var el = document.createElement('div');\n                return popup\n            },\n\n            addControlToMap(){\n                map.addControl(\n                    new mapboxgl.GeolocateControl({\n                        positionOptions: {\n                            enableHighAccuracy: true\n                        },\n                        trackUserLocation: true\n                    }),\n                );\n\n                // Add zoom and rotation controls to the map.\n                map.addControl(new mapboxgl.NavigationControl());\n            },\n\n            async getOrganizationsInfo(){\n                let instanceOrg = new OrganizationUser({\n                    email: undefined,\n                    password: undefined,\n                    name: undefined,\n                    parkingSpaces: undefined,\n                    coordenates: undefined,\n                })\n\n                for (const org of this.organizations){\n                    await instanceOrg.getOrganizationByOID(org.oid).then( orgByOID => {\n                        let o = {}\n                        o.oid = org.oid\n                        o.name = orgByOID.organizationName\n                        o.coordenates = [orgByOID.coordenateLNG, orgByOID.coordenateLAT]\n                        return o\n                    }).then( orga => {\n                        //this.organizationINFO = org\n                        const popup = this.creatingPopup(orga.name, orga.oid)\n                        this.garajeDoor = new mapboxgl.Marker().setLngLat(orga.coordenates).setPopup(popup).addTo(map)\n                        this.listOID.push(orga.oid)\n                    })\n                }                \n            },\n\n            /**\n             * Throw events to parents.\n             */\n            confirmForm(){\n                this.$emit('followOIDFromMap', window.followOID);\n            }, \n\n            /**\n             * Throw events to parents.\n             */\n            cancelForm(){\n                this.$emit('closeForm');\n            }, \n        },\n\n    }\n\n</script>\n\n\n<style scoped>\n    #map { \n\n        position: absolute; \n        right: 40px; \n        top: 100px; \n        width: 90%; \n        height: 300px; \n    }\n\n    .test {\n        position: relative;\n        top: 400px;\n    }\n</style>\n\n"]}]}