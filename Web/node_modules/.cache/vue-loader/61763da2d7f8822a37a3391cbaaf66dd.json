{"remainingRequest":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/javi/Escritorio/TFG - Web/tfg-web/src/views/garaje/Garaje-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/src/views/garaje/Garaje-list.vue","mtime":1580651168310},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n    // Models\n    import OrganizationUser from '../../models/user/organizationUser'\n    import RentGarajeSpace from '../../models/rentGarajeSpace/rentGarajeSpace'\n\n    export default {\n        data () {\n            return {\n                organizations: [\n                    // {                        \n                    //     name: 'Test',\n                    //     requestStatus: 'TRUE',\n                    //     garajes: [\n                    //         { title: 'List Item1' },\n                    //         { title: 'List Item2' },\n                    //     ],\n                    // },\n                ],\n                rents: [\n\n                ]\n            }\n        },   \n\n        created() {\n            this.getAllOrganizationsList()\n            this.getAllRentList()\n        },\n\n        computed:{\n\t\t\t/**\n\t\t\t * Determine if a user is logged in the app.\n\t\t\t */\n\t\t\tuserLogged(){\n\t\t\t\treturn this.$store.state.session.user\n            }\n\n        },\n\n        methods: {\n            enableOrganizationForm() {\n                this.$emit('enableOrganizationForm')\n            },\n\n            enableRentForm() {\n                this.$emit('enableRentForm')\n            },\n\n            selectOrganization(garaje){\n                this.$emit('selectOrganization', garaje)\n            },\n\n            selectRent(garaje){\n                this.$emit('selectRent', garaje)\n            },\n\n            async getAllOrganizationsList(){\n                await this.userLogged.getOrganizations().then( organizations => {\n                    this.organizations = []\n                    for (let org of organizations){\n                        let instanceOrg = new OrganizationUser({\n                            email: undefined,\n                            password: undefined,\n                            name: undefined,\n                            parkingSpaces: undefined,\n                            coordenates: undefined,\n                        })\n                        instanceOrg.getOrganizationByOID(org.oid).then( orgByOID => {\n                            let nameOrg = orgByOID.organizationName\n\n                            this.userLogged.getParkingsOfOrganization(org.oid).then( parkings => {\n                                let garajes = []\n                                for (const park of parkings){\n                                    garajes.push({'title': park.title, 'oid': org.oid, 'pid': park.pid, 'coordenateLAT': orgByOID.coordenateLAT, 'coordenateLNG': orgByOID.coordenateLNG})\n                                }\n                                return garajes\n                            }).then( (garajes) => {\n                                this.organizations.push({ 'oid': org.oid, 'name': nameOrg, 'requestStatus': org.requestStatus, 'garajes': garajes})\n                            })\n                        })\n                    }\n                })\n            },  \n            \n            async getAllRentList() {\n                await this.userLogged.getRentList().then( rents => {\n                    this.rents = []\n                    for(const rent1 of rents){\n                        let cont = 1\n                        const instaceRentGarajeSpace = new RentGarajeSpace()\n                        instaceRentGarajeSpace.getMyRentByPID(rent1.pid, this.userLogged.uid).then( listOfRents => {\n                            let rents = []\n                            let cont = 1\n                            for (const rent of listOfRents) {\n                                rents.push({'title': 'Parking ' + cont, 'uidOwner': rent1.uidOwner, 'approvedByOwner': rent.approvedByOwner, 'coordenates': [rent.coordenateLNG, rent.coordenateLAT] , 'dates': rent.dates, 'endHour': rent.endHour, 'startHour': rent.startHour })\n                                cont +=1\n                            }\n                            return rents\n                        }).then( rents => {\n                            this.rents.push({'pid': rent1.pid, 'name': 'Rent ' + cont, 'rents': rents})\n                            cont += 1\n                        })\n                    }\n                })\n            }\n        \n        }\n    }\n",{"version":3,"sources":["Garaje-list.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiFA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"Garaje-list.vue","sourceRoot":"src/views/garaje","sourcesContent":["<template>\n    <v-card flat>\n        <v-card-title style=\"background-color:#164E77;\"> <v-row justify=\"center\"> <h4 style=\"color:white;\"> Your Garages </h4> </v-row></v-card-title>\n\n        <v-divider></v-divider>\n\n        <v-list>\n            <v-list-item @click=\"enableOrganizationForm\">\n                <v-list-item-icon><v-icon>mdi-plus-circle</v-icon></v-list-item-icon>\n                <v-list-item-title>Add new Organization</v-list-item-title>\n            </v-list-item>\n            <v-list-item @click=\"enableRentForm\">\n                <v-list-item-icon><v-icon>mdi-plus-circle</v-icon></v-list-item-icon>\n                <v-list-item-title>Rent a garaje</v-list-item-title>\n            </v-list-item>\n\n        </v-list>\n\n        <v-divider></v-divider>\n\n        <v-list two-line style=\" width:100%; height:100%;\">\n            <v-subheader>Organizations</v-subheader>\n            <v-list-group\n                v-for=\"org in organizations\"\n                :key=\"org.oid\"\n                v-model=\"org.active\"\n                :disabled=\"org.requestStatus == 'SENT'\"\n                no-action\n            >\n                <template v-slot:activator>\n                    <v-list-item-content>\n                        <v-list-item-title v-text=\"org.name\"></v-list-item-title>\n                        <v-list-item-subtitle v-if=\"org.requestStatus == 'SENT'\">Request is not accepted yet</v-list-item-subtitle>\n                    </v-list-item-content>\n                </template>\n\n                <v-list-item\n                    v-for=\"garaje in org.garajes\"\n                    :key=\"garaje.title\"\n                    @click=\"selectOrganization(garaje)\">\n                    <v-list-item-content>\n                        <v-list-item-title v-text=\"garaje.title\"></v-list-item-title>\n                    </v-list-item-content>\n                </v-list-item>\n            </v-list-group>\n        </v-list>\n\n        <v-divider></v-divider>\n\n        <v-list two-line style=\" width:100%; height:100%;\">\n            <v-subheader>Rents</v-subheader>\n            <v-list-group\n                v-for=\"r in rents\"\n                :key=\"r.oid\"\n                v-model=\"r.active\"\n                :disabled=\"r.requestStatus == 'SENT'\"\n                no-action\n            >\n                <template v-slot:activator>\n                    <v-list-item-content>\n                        <v-list-item-title v-text=\"r.name\"></v-list-item-title>\n                        <v-list-item-subtitle v-if=\"r.requestStatus == 'SENT'\">Request is not accepted yet</v-list-item-subtitle>\n                    </v-list-item-content>\n                </template>\n\n                <v-list-item\n                    v-for=\"rent in r.rents\"\n                    :key=\"rent.title\"\n                    @click=\"selectRent(rent)\">\n                    <v-list-item-content>\n                        <v-list-item-title v-text=\"rent.title\"></v-list-item-title>\n                    </v-list-item-content>\n                </v-list-item>\n            </v-list-group>\n        </v-list>\n\n    </v-card>\n</template>\n\n<script>\n\n    // Models\n    import OrganizationUser from '../../models/user/organizationUser'\n    import RentGarajeSpace from '../../models/rentGarajeSpace/rentGarajeSpace'\n\n    export default {\n        data () {\n            return {\n                organizations: [\n                    // {                        \n                    //     name: 'Test',\n                    //     requestStatus: 'TRUE',\n                    //     garajes: [\n                    //         { title: 'List Item1' },\n                    //         { title: 'List Item2' },\n                    //     ],\n                    // },\n                ],\n                rents: [\n\n                ]\n            }\n        },   \n\n        created() {\n            this.getAllOrganizationsList()\n            this.getAllRentList()\n        },\n\n        computed:{\n\t\t\t/**\n\t\t\t * Determine if a user is logged in the app.\n\t\t\t */\n\t\t\tuserLogged(){\n\t\t\t\treturn this.$store.state.session.user\n            }\n\n        },\n\n        methods: {\n            enableOrganizationForm() {\n                this.$emit('enableOrganizationForm')\n            },\n\n            enableRentForm() {\n                this.$emit('enableRentForm')\n            },\n\n            selectOrganization(garaje){\n                this.$emit('selectOrganization', garaje)\n            },\n\n            selectRent(garaje){\n                this.$emit('selectRent', garaje)\n            },\n\n            async getAllOrganizationsList(){\n                await this.userLogged.getOrganizations().then( organizations => {\n                    this.organizations = []\n                    for (let org of organizations){\n                        let instanceOrg = new OrganizationUser({\n                            email: undefined,\n                            password: undefined,\n                            name: undefined,\n                            parkingSpaces: undefined,\n                            coordenates: undefined,\n                        })\n                        instanceOrg.getOrganizationByOID(org.oid).then( orgByOID => {\n                            let nameOrg = orgByOID.organizationName\n\n                            this.userLogged.getParkingsOfOrganization(org.oid).then( parkings => {\n                                let garajes = []\n                                for (const park of parkings){\n                                    garajes.push({'title': park.title, 'oid': org.oid, 'pid': park.pid, 'coordenateLAT': orgByOID.coordenateLAT, 'coordenateLNG': orgByOID.coordenateLNG})\n                                }\n                                return garajes\n                            }).then( (garajes) => {\n                                this.organizations.push({ 'oid': org.oid, 'name': nameOrg, 'requestStatus': org.requestStatus, 'garajes': garajes})\n                            })\n                        })\n                    }\n                })\n            },  \n            \n            async getAllRentList() {\n                await this.userLogged.getRentList().then( rents => {\n                    this.rents = []\n                    for(const rent1 of rents){\n                        let cont = 1\n                        const instaceRentGarajeSpace = new RentGarajeSpace()\n                        instaceRentGarajeSpace.getMyRentByPID(rent1.pid, this.userLogged.uid).then( listOfRents => {\n                            let rents = []\n                            let cont = 1\n                            for (const rent of listOfRents) {\n                                rents.push({'title': 'Parking ' + cont, 'uidOwner': rent1.uidOwner, 'approvedByOwner': rent.approvedByOwner, 'coordenates': [rent.coordenateLNG, rent.coordenateLAT] , 'dates': rent.dates, 'endHour': rent.endHour, 'startHour': rent.startHour })\n                                cont +=1\n                            }\n                            return rents\n                        }).then( rents => {\n                            this.rents.push({'pid': rent1.pid, 'name': 'Rent ' + cont, 'rents': rents})\n                            cont += 1\n                        })\n                    }\n                })\n            }\n        \n        }\n    }\n</script>"]}]}