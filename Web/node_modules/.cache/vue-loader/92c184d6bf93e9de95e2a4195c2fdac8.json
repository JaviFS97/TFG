{"remainingRequest":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/javi/Escritorio/TFG - Web/tfg-web/src/views/dashboard/Dashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/src/views/dashboard/Dashboard.vue","mtime":1579634850048},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    // Vuex\n    import { mapMutations } from 'vuex'\n\n    // Chartjs\n   import Chart from 'chart.js'; \n\n    export default {\n        created(){\n            this.setTopBarName('Dashboard')\n            this.getTimeLines()\n\n            const ctx = document.getElementById('planet-chart');\n            const myChart = new Chart(ctx, {\n            type: '',\n            data: [],\n            options: {},\n            });\n        },\n\n        data() {\n            return {\n                timeLines: [],\n                planetChartData:  {\n                    type: 'pie',\n                    data: {\n                        labels: ['Free', 'Occuped'],\n                        datasets: [\n                        {\n                            label: 'Number of Moons',\n                            data: [4, 8],\n                            backgroundColor: [\n                                'rgba(77, 175, 124, 1)', // Blue\n                                'rgba(236, 100, 75, 1)',\n                            ],\n                            borderColor: [\n                                '#36495d',\n                                '#36495d',      \n                            ],\n                            borderWidth: 3\n                        },\n                        ]\n                    },\n                    options: {\n                        responsive: true,\n                    }\n                }\n            }\n        },\n\n        computed:{\n\t\t\t/**\n\t\t\t * Determine if a user is logged in the app.\n\t\t\t */\n\t\t\tuserLogged(){\n\t\t\t\treturn this.$store.state.session.user\n            },\n\n            userType() {\n                return this.$store.state.session.userType\n            }\n            \n\n        },\n\n        mounted() {\n            this.createChart('planet-chart', this.planetChartData);\n        },\n\n\n        methods: {\n            ...mapMutations('core', ['setTopBarName']),\n\n            async getTimeLines() {\n                await this.userLogged.getTimeLines().then( timeLines => {\n                    for (const timeLine of timeLines){\n                        // let personalUser = new PersonalUser({\n                        //     nick: undefined,\n                        //     name: undefined,\n                        //     lastName: undefined,\n                        //     country: undefined,\n                        // })\n                        // personalUser.getPersonalUserByUID(user.uid).then( userInfo => {\n                        //     this.usersList.push({name: userInfo.name, uid: user.uid, parkingSpaces: user.parkingSpaces})\n                        // })\n\n                        this.timeLines.push({date: this.timeConverter(timeLine.date.seconds), plateURL: timeLine.plateURL, status: timeLine.status})\n                    }\n\n                })\n            },\n\n\n            timeConverter(unixtimestamp){\n                var months_arr = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n                var date = new Date(unixtimestamp*1000);\n                var year = date.getFullYear();\n                var month = months_arr[date.getMonth()];\n                var day = date.getDate();\n                var hours = date.getHours();\n                var minutes = \"0\" + date.getMinutes();\n                var seconds = \"0\" + date.getSeconds();\n                var convdataTime = month+'-'+day+'-'+year+' '+hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n                return convdataTime\n            },\n\n\n            createChart(chartId, chartData) {\n                const ctx = document.getElementById(chartId);\n                const myChart = new Chart(ctx, {\n                    type: chartData.type,\n                    data: chartData.data,\n                    options: chartData.options,\n                });\n            }\n        }\n    \n    }\n",{"version":3,"sources":["Dashboard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"Dashboard.vue","sourceRoot":"src/views/dashboard","sourcesContent":["<template>\n    <v-container>\n        <v-row v-if=\"userType=='organizationUser'\">\n            <v-col cols=\"6\">\n                <v-row justify=\"center\" >\n                    <h2 id=\"title-chart\">Garaje status</h2>\n                    <canvas id=\"planet-chart\"></canvas>\n                </v-row>\n                \n            </v-col>\n                \n            <v-col cols=\"6\">\n                <v-timeline dense>\n                    <v-timeline-item v-for=\"timeLine in timeLines\" :key=\"timeLine\"\n                        color=\"green lighten-2\"\n                        small\n                    >\n                    <v-card class=\"elevation-2\">\n                        <v-card-title class=\"headline primary\">\n\n                            <h4 v-if=\"timeLine.status == 'Leave'\" class=\"ml-4\" style=\"color:white;\">\n                                Leave garaje\n                            </h4>\n                            <h4 v-if=\"timeLine.status == 'Enter'\" class=\"ml-4\" style=\"color:white;\">\n                                Enter garaje\n                            </h4>                            \n                            <h4 v-if=\"timeLine.status == 'Error'\" class=\"ml-4\" style=\"color:white;\">\n                                Does not belong to the garage\n                            </h4>                             \n                        </v-card-title>\n                        <v-container>\n                            <v-row>                            \n                                <v-col cols=\"6\">                               \n                                    <b>Date:</b> {{timeLine.date }}\n                                    \n                                </v-col>\n                                <v-col cols=\"6\">\n                                    <img :src=\"timeLine.plateURL \" height=\"100%\" width=\"100%\">\n                                </v-col>    \n                            </v-row>\n                        </v-container>\n                        \n                            \n                        \n                        \n                    </v-card>\n                    </v-timeline-item>\n                </v-timeline>\n            </v-col>\n        </v-row>\n    </v-container>\n\n</template>\n\n<script>\n    // Vuex\n    import { mapMutations } from 'vuex'\n\n    // Chartjs\n   import Chart from 'chart.js'; \n\n    export default {\n        created(){\n            this.setTopBarName('Dashboard')\n            this.getTimeLines()\n\n            const ctx = document.getElementById('planet-chart');\n            const myChart = new Chart(ctx, {\n            type: '',\n            data: [],\n            options: {},\n            });\n        },\n\n        data() {\n            return {\n                timeLines: [],\n                planetChartData:  {\n                    type: 'pie',\n                    data: {\n                        labels: ['Free', 'Occuped'],\n                        datasets: [\n                        {\n                            label: 'Number of Moons',\n                            data: [4, 8],\n                            backgroundColor: [\n                                'rgba(77, 175, 124, 1)', // Blue\n                                'rgba(236, 100, 75, 1)',\n                            ],\n                            borderColor: [\n                                '#36495d',\n                                '#36495d',      \n                            ],\n                            borderWidth: 3\n                        },\n                        ]\n                    },\n                    options: {\n                        responsive: true,\n                    }\n                }\n            }\n        },\n\n        computed:{\n\t\t\t/**\n\t\t\t * Determine if a user is logged in the app.\n\t\t\t */\n\t\t\tuserLogged(){\n\t\t\t\treturn this.$store.state.session.user\n            },\n\n            userType() {\n                return this.$store.state.session.userType\n            }\n            \n\n        },\n\n        mounted() {\n            this.createChart('planet-chart', this.planetChartData);\n        },\n\n\n        methods: {\n            ...mapMutations('core', ['setTopBarName']),\n\n            async getTimeLines() {\n                await this.userLogged.getTimeLines().then( timeLines => {\n                    for (const timeLine of timeLines){\n                        // let personalUser = new PersonalUser({\n                        //     nick: undefined,\n                        //     name: undefined,\n                        //     lastName: undefined,\n                        //     country: undefined,\n                        // })\n                        // personalUser.getPersonalUserByUID(user.uid).then( userInfo => {\n                        //     this.usersList.push({name: userInfo.name, uid: user.uid, parkingSpaces: user.parkingSpaces})\n                        // })\n\n                        this.timeLines.push({date: this.timeConverter(timeLine.date.seconds), plateURL: timeLine.plateURL, status: timeLine.status})\n                    }\n\n                })\n            },\n\n\n            timeConverter(unixtimestamp){\n                var months_arr = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n                var date = new Date(unixtimestamp*1000);\n                var year = date.getFullYear();\n                var month = months_arr[date.getMonth()];\n                var day = date.getDate();\n                var hours = date.getHours();\n                var minutes = \"0\" + date.getMinutes();\n                var seconds = \"0\" + date.getSeconds();\n                var convdataTime = month+'-'+day+'-'+year+' '+hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n                return convdataTime\n            },\n\n\n            createChart(chartId, chartData) {\n                const ctx = document.getElementById(chartId);\n                const myChart = new Chart(ctx, {\n                    type: chartData.type,\n                    data: chartData.data,\n                    options: chartData.options,\n                });\n            }\n        }\n    \n    }\n</script>\n\n\n<style >\n    #planet-chart{\n        position: fixed;\n        top: 35%;\n        left: 7%;\n    }\n    #title-chart{\n        position: fixed;\n        top: 30%;\n    }\n</style>"]}]}