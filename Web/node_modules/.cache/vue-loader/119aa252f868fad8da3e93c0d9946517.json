{"remainingRequest":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/javi/Escritorio/TFG - Web/tfg-web/src/views/manageGaraje/organization/Organization-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/src/views/manageGaraje/organization/Organization-list.vue","mtime":1579457933225},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n    // Models\n    import PersonalUser from '../../../models/user/personalUser'\n\n    export default {\n        data () {\n            return {\n                isEnableAcceptForm: false,\n                isEnableDenyForm: false,\n                infoToAcceptForm: {},\n                loadingMemberList: true,\n                search: '',\n                headers: [\n                    {\n                        text: 'Name',\n                        align: 'left',\n                        value: 'name',\n                    },\n                    {\n                        text: 'ParkingSpaces',\n                        align: 'left',\n                        value: 'parkingSpaces',\n                    },\n                    {   text: 'Actions',\n                        value: 'action',\n                        sortable: false,\n                        align: 'center',\n                    },\n                ],\n                usersList: [\n                    // {\n                    //     name: 'Frozen Yogurt',\n                    // },\n                    // {\n                    //     name: 'Pepe',\n                    // },\n                ],\n            }\n        },\n\n        created() {\n            this.getMemberList()\n        },\n\n        computed:{\n\t\t\t/**\n\t\t\t * Determine if a user is logged in the app.\n\t\t\t */\n\t\t\tuserLogged(){\n\t\t\t\treturn this.$store.state.session.user\n            }\n\n        },  \n        \n        methods: {\n            async getMemberList(){\n                this.usersList = []\n                this.loadingMemberList = true\n                await this.sleep(1500) \n                await this.userLogged.getMembers().then( usersList => {\n                    for (const user of usersList){\n                        let personalUser = new PersonalUser({\n                            nick: undefined,\n                            name: undefined,\n                            lastName: undefined,\n                            country: undefined,\n                        })\n                        personalUser.getPersonalUserByUID(user.uid).then( userInfo => {\n                            this.usersList.push({name: userInfo.name, uid: user.uid, parkingSpaces: user.parkingSpaces})\n                        })\n                    }\n                })\n                this.loadingMemberList = false\n            },    \n            \n            /** Simulates a response wait from the backend\n             * @param {Number} ms time to sleep.\n             * @return {Promise}\n             */\n            sleep(ms) {\n                return new Promise(resolve => setTimeout(resolve, ms));\n            }            \n        }\n    \n    }\n",{"version":3,"sources":["Organization-list.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"Organization-list.vue","sourceRoot":"src/views/manageGaraje/organization","sourcesContent":["<template>\n    <v-container> \n        <v-card flat>\n            <v-card-title>\n                User list containing your organization\n                <v-spacer></v-spacer>\n                <v-text-field\n                    v-model=\"search\"\n                    append-icon=\"mdi-magnify\"\n                    label=\"Search\"\n                    single-line\n                    hide-details\n                ></v-text-field>                                    \n            </v-card-title>\n\n            <v-data-table\n                :loading=\"loadingMemberList\" loading-text=\"Loading... Please wait\"\n                :headers=\"headers\"\n                :items=\"usersList\"\n                :search=\"search\">                                            \n                    <template v-slot:item.action=\"{ item }\">\n                        <v-btn color=\"red darken-1\" text @click=\"denyRequest(item)\"><v-icon>mdi-delete</v-icon></v-btn>                        \n                        <v-btn color=\"grey darken-1\" text @click=\"confirmRequest(item)\"> <v-icon>mdi-pencil</v-icon> </v-btn>\n                    </template>\n            </v-data-table>\n        </v-card>\n\n        <!-- <UsersRequestForm \n            :enableAcceptForm=\"isEnableAcceptForm\" \n            @disableAcceptForm=\"disableAcceptForm\"\n            :enableDenyForm=\"isEnableDenyForm\" \n            @disableDenyForm=\"isEnableDenyForm=false\"\n            :infoToAcceptForm=\"infoToAcceptForm\">\n        </UsersRequestForm> -->\n    </v-container>\n</template>\n\n\n<script>\n\n    // Models\n    import PersonalUser from '../../../models/user/personalUser'\n\n    export default {\n        data () {\n            return {\n                isEnableAcceptForm: false,\n                isEnableDenyForm: false,\n                infoToAcceptForm: {},\n                loadingMemberList: true,\n                search: '',\n                headers: [\n                    {\n                        text: 'Name',\n                        align: 'left',\n                        value: 'name',\n                    },\n                    {\n                        text: 'ParkingSpaces',\n                        align: 'left',\n                        value: 'parkingSpaces',\n                    },\n                    {   text: 'Actions',\n                        value: 'action',\n                        sortable: false,\n                        align: 'center',\n                    },\n                ],\n                usersList: [\n                    // {\n                    //     name: 'Frozen Yogurt',\n                    // },\n                    // {\n                    //     name: 'Pepe',\n                    // },\n                ],\n            }\n        },\n\n        created() {\n            this.getMemberList()\n        },\n\n        computed:{\n\t\t\t/**\n\t\t\t * Determine if a user is logged in the app.\n\t\t\t */\n\t\t\tuserLogged(){\n\t\t\t\treturn this.$store.state.session.user\n            }\n\n        },  \n        \n        methods: {\n            async getMemberList(){\n                this.usersList = []\n                this.loadingMemberList = true\n                await this.sleep(1500) \n                await this.userLogged.getMembers().then( usersList => {\n                    for (const user of usersList){\n                        let personalUser = new PersonalUser({\n                            nick: undefined,\n                            name: undefined,\n                            lastName: undefined,\n                            country: undefined,\n                        })\n                        personalUser.getPersonalUserByUID(user.uid).then( userInfo => {\n                            this.usersList.push({name: userInfo.name, uid: user.uid, parkingSpaces: user.parkingSpaces})\n                        })\n                    }\n                })\n                this.loadingMemberList = false\n            },    \n            \n            /** Simulates a response wait from the backend\n             * @param {Number} ms time to sleep.\n             * @return {Promise}\n             */\n            sleep(ms) {\n                return new Promise(resolve => setTimeout(resolve, ms));\n            }            \n        }\n    \n    }\n</script>"]}]}