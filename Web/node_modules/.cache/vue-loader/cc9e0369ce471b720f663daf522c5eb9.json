{"remainingRequest":"/home/javi/Escritorio/TFG/Web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/javi/Escritorio/TFG/Web/src/views/vehicule/Vehicule-core.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/javi/Escritorio/TFG/Web/src/views/vehicule/Vehicule-core.vue","mtime":1577300174800},{"path":"/home/javi/Escritorio/TFG/Web/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/javi/Escritorio/TFG/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/javi/Escritorio/TFG/Web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    // Vuex\n    import { mapMutations } from 'vuex'\n\n    // Child componets\n    import VehiculeCard from './Vehicule-card'\n    import VehiculeForm from './Vehicule-form'\n\n    export default {\n        components: { VehiculeCard, VehiculeForm },\n\n        data: () => ({\n           i:0,\n           visibleVehiculeForm: false,\n           listOfVehicules: [],\n           loading: true,\n           vehiculeToModify: null\n        }),\n\n        computed:{\n\t\t\t/**\n\t\t\t * Determine if a user is logged in the app.\n\t\t\t */\n\t\t\tuserLogged(){\n\t\t\t\treturn this.$store.state.session.user\n            },\n            \n\n        },\n        \n        async created(){\n            this.setTopBarName('Vehicules')\n\n            // Getting vehicules from database\n            await this.sleep(1000)\n            this.listenerVehicules()\n        },\n\n        methods: {\n            ...mapMutations('core', ['setTopBarName']),\n\n            enableVehiculeForm(){\n                this.visibleVehiculeForm = true\n            },\n            \n            /**\n             * Event called by childs.\n             */\n            disableVehiculeForm(){\n                this.visibleVehiculeForm = false\n                this.vehiculeToModify = null\n            },\n\n            /**\n             * Event called by childs.\n             */\n            addVehiculeCard(){\n                this.listenerVehicules()\n                this.disableVehiculeForm()\n            },\n\n            /**\n             * Event called by childs.\n             */\n            removeVehiculeCard(){\n                this.listenerVehicules()\n            },\n\n            /**\n             * Event called by childs.\n             */ \n            modifyVehiculeCard(vehicule){\n                this.vehiculeToModify = vehicule\n                this.enableVehiculeForm()\n            },\n\n\n            /**\n             * listens to all the changes that hapen in the user's vehicules database.\n             */\n            async listenerVehicules(){\n                this.loading = true\n                this.listOfVehicules = await this.userLogged.listenerVehicules()\n                this.loading = false\n            },\n\n            /** Simulates a response wait from the backend\n             * @param {Number} ms time to sleep.\n             * @return {Promise}\n             */\n            sleep(ms) {\n                return new Promise(resolve => setTimeout(resolve, ms));\n            }\n\n        },\n    }\n",{"version":3,"sources":["Vehicule-core.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"Vehicule-core.vue","sourceRoot":"src/views/vehicule","sourcesContent":["<template>\n    <v-container>\n        <v-row justify=\"center\" class=\"mb-5\">\n            <h1>Your vehicules</h1>\n        </v-row>\n\n        <v-row v-if='loading' justify=\"center\" class=\"mt-10\"> \n            <v-progress-circular\n                :size=\"75\"\n                color=\"primary\"\n                indeterminate>\n            </v-progress-circular>\n        </v-row>      \n\n        <v-row v-else justify=\"center\">\n            <img v-if=\"listOfVehicules.length == 0\" src=\"../../assets/illustrations/undraw_no_data_qbuo.svg\" width=\"40%\" height=\"50%\" alt=\"\">\n            \n            <!-- <v-col xs=\"12\" sm=\"6\" md=\"4\" v-for=\"vehicule in vehicules\" :key=\"vehicule.plate\"> -->\n            <v-col cols=\"10\" sm=\"6\" md=\"4\" lg=\"3\" xl=\"2\" v-for=\"(vehicule, index) in listOfVehicules\" :key=\"index\">\n                <VehiculeCard \n                    :vehicule='vehicule'\n                    @deleteVehicule='removeVehiculeCard'\n                    @modifyVehicule='modifyVehiculeCard'>\n                </VehiculeCard>\n            </v-col>\n        </v-row>\n        \n\n        <v-row class=\"boton-flotante\">\n            <v-btn \n                @click=\"enableVehiculeForm\"\n                class=\"mx-8 mt-8\"  \n                fab \n                dark \n                color=\"primary\">\n                    <v-icon dark>mdi-plus</v-icon>\n            </v-btn>          \n        </v-row>\n        \n        <v-row v-if=\"visibleVehiculeForm\">\n            <VehiculeForm \n                :visibleForm='visibleVehiculeForm'\n                :vehiculeToModify='vehiculeToModify'\n                @saveVehicule='addVehiculeCard'\n                @disabledForm='disableVehiculeForm'>\n            </VehiculeForm>\n        </v-row>\n\n        \n    </v-container>\n</template>\n\n\n<script>\n    // Vuex\n    import { mapMutations } from 'vuex'\n\n    // Child componets\n    import VehiculeCard from './Vehicule-card'\n    import VehiculeForm from './Vehicule-form'\n\n    export default {\n        components: { VehiculeCard, VehiculeForm },\n\n        data: () => ({\n           i:0,\n           visibleVehiculeForm: false,\n           listOfVehicules: [],\n           loading: true,\n           vehiculeToModify: null\n        }),\n\n        computed:{\n\t\t\t/**\n\t\t\t * Determine if a user is logged in the app.\n\t\t\t */\n\t\t\tuserLogged(){\n\t\t\t\treturn this.$store.state.session.user\n            },\n            \n\n        },\n        \n        async created(){\n            this.setTopBarName('Vehicules')\n\n            // Getting vehicules from database\n            await this.sleep(1000)\n            this.listenerVehicules()\n        },\n\n        methods: {\n            ...mapMutations('core', ['setTopBarName']),\n\n            enableVehiculeForm(){\n                this.visibleVehiculeForm = true\n            },\n            \n            /**\n             * Event called by childs.\n             */\n            disableVehiculeForm(){\n                this.visibleVehiculeForm = false\n                this.vehiculeToModify = null\n            },\n\n            /**\n             * Event called by childs.\n             */\n            addVehiculeCard(){\n                this.listenerVehicules()\n                this.disableVehiculeForm()\n            },\n\n            /**\n             * Event called by childs.\n             */\n            removeVehiculeCard(){\n                this.listenerVehicules()\n            },\n\n            /**\n             * Event called by childs.\n             */ \n            modifyVehiculeCard(vehicule){\n                this.vehiculeToModify = vehicule\n                this.enableVehiculeForm()\n            },\n\n\n            /**\n             * listens to all the changes that hapen in the user's vehicules database.\n             */\n            async listenerVehicules(){\n                this.loading = true\n                this.listOfVehicules = await this.userLogged.listenerVehicules()\n                this.loading = false\n            },\n\n            /** Simulates a response wait from the backend\n             * @param {Number} ms time to sleep.\n             * @return {Promise}\n             */\n            sleep(ms) {\n                return new Promise(resolve => setTimeout(resolve, ms));\n            }\n\n        },\n    }\n</script>\n\n\n<style>\n    .boton-flotante {\n        position:fixed;\n        width:60px;\n        height:60px;\n        bottom:50px;\n        right:60px;\n    }\n</style>"]}]}