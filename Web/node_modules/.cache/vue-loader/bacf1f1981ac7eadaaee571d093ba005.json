{"remainingRequest":"/home/javi/Escritorio/TFG/Web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/javi/Escritorio/TFG/Web/src/components/maps/MapRents.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/javi/Escritorio/TFG/Web/src/components/maps/MapRents.vue","mtime":1580575567744},{"path":"/home/javi/Escritorio/TFG/Web/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/javi/Escritorio/TFG/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/javi/Escritorio/TFG/Web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n    import mapboxgl from 'mapbox-gl'\n\n    var map = null\n    window.rentPID = []\n\n    export default {\n        props: ['rents'],\n\n        data() {\n            return {\n                listOID: [],\n                pid: true\n            }\n        },\n\n        computed:{\n\t\t\t/**\n\t\t\t * Determine if a user is logged in the app.\n\t\t\t */\n\t\t\tuserLogged(){\n\t\t\t\treturn this.$store.state.session.user\n            }\n\n        },        \n\n        async mounted() {\n\n            mapboxgl.accessToken = 'pk.eyJ1IjoicHJ1ZWJhMSIsImEiOiJjazFpNm1kNDAwMzJhM2ltbmRwcXJxbzUyIn0.xp_6hLfEEPqJsPfQA4pmNg';\n            map = new mapboxgl.Map({\n                container: 'map', \n                style: 'mapbox://styles/mapbox/streets-v11', \n                zoom: 1 \n            });\n            \n            this.addControlToMap()\n            \n            for (const rent of this.rents){\n                if (!this.itsMyPublish(rent.uidOwner)){\n                    const popup = this.creatingPopup(rent)\n                    const coordenates = [rent.coordenateLNG, rent.coordenateLAT]\n                    this.garajeDoor = new mapboxgl.Marker().setLngLat(coordenates).setPopup(popup).addTo(map)\n                }\n            }\n        },\n\n        methods: {\n            creatingPopup(rent){\n                console.log(rent)\n                // create the popup\n                var popup = new mapboxgl.Popup({ offset: 25 }).setText(\n                    name + \"'s garaje is here.\"\n                );\n\n                const description = \n                    `\n                    <div> \n                        <b> ${rent.pid} publish</b> \n                        <hr> \n                        <button type=\"button\"\n                            onclick=\" window.rentPID.push( ${rent.pid});\n\n                                    \"> Follow</button>\n                        <hr>  \n                    </div>\n                    `\n\n\n\n                popup.setHTML(description)\n\n                // create DOM element for the marker\n                var el = document.createElement('div');\n                return popup\n            },\n\n            addControlToMap(){\n                map.addControl(\n                    new mapboxgl.GeolocateControl({\n                        positionOptions: {\n                            enableHighAccuracy: true\n                        },\n                        trackUserLocation: true\n                    }),\n                );\n\n                // Add zoom and rotation controls to the map.\n                map.addControl(new mapboxgl.NavigationControl());\n            },\n\n            itsMyPublish(rentUidOwner){\n                return rentUidOwner == this.userLogged.uid\n            },\n\n            /**\n             * Throw events to parents.\n             */\n            confirmForm(){\n                for (const rent of this.rents){\n                    if (rent.pid == window.rentPID){\n                        this.$emit('selectedParking', rent);\n                    }\n                }\n\n            }, \n\n            /**\n             * Throw events to parents.\n             */\n            cancelForm(){\n                this.$emit('closeForm');\n            }, \n        },\n\n    }\n\n",{"version":3,"sources":["MapRents.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAoBA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"MapRents.vue","sourceRoot":"src/components/maps","sourcesContent":["<template>\n    <v-container>\n        <div>\n            <script type=\"application/javascript\" src='https://api.tiles.mapbox.com/mapbox-gl-js/v1.4.0/mapbox-gl.js'></script>\n            <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v1.4.0/mapbox-gl.css' rel='stylesheet' />\n            \n            <div id='map'></div>         \n        </div>        \n        <div class=\"bottoms\">\n            <v-row justify=\"center\">                        \n                <v-btn color=\"red darken-1\" text @click=\"cancelForm\">Cancel</v-btn>\n                <v-btn color=\"green darken-1\" text @click=\"confirmForm\">Next</v-btn>\n            </v-row>\n        </div>        \n    </v-container>\n\n</template>\n\n\n<script>\n    import mapboxgl from 'mapbox-gl'\n\n    var map = null\n    window.rentPID = []\n\n    export default {\n        props: ['rents'],\n\n        data() {\n            return {\n                listOID: [],\n                pid: true\n            }\n        },\n\n        computed:{\n\t\t\t/**\n\t\t\t * Determine if a user is logged in the app.\n\t\t\t */\n\t\t\tuserLogged(){\n\t\t\t\treturn this.$store.state.session.user\n            }\n\n        },        \n\n        async mounted() {\n\n            mapboxgl.accessToken = 'pk.eyJ1IjoicHJ1ZWJhMSIsImEiOiJjazFpNm1kNDAwMzJhM2ltbmRwcXJxbzUyIn0.xp_6hLfEEPqJsPfQA4pmNg';\n            map = new mapboxgl.Map({\n                container: 'map', \n                style: 'mapbox://styles/mapbox/streets-v11', \n                zoom: 1 \n            });\n            \n            this.addControlToMap()\n            \n            for (const rent of this.rents){\n                if (!this.itsMyPublish(rent.uidOwner)){\n                    const popup = this.creatingPopup(rent)\n                    const coordenates = [rent.coordenateLNG, rent.coordenateLAT]\n                    this.garajeDoor = new mapboxgl.Marker().setLngLat(coordenates).setPopup(popup).addTo(map)\n                }\n            }\n        },\n\n        methods: {\n            creatingPopup(rent){\n                console.log(rent)\n                // create the popup\n                var popup = new mapboxgl.Popup({ offset: 25 }).setText(\n                    name + \"'s garaje is here.\"\n                );\n\n                const description = \n                    `\n                    <div> \n                        <b> ${rent.pid} publish</b> \n                        <hr> \n                        <button type=\"button\"\n                            onclick=\" window.rentPID.push( ${rent.pid});\n\n                                    \"> Follow</button>\n                        <hr>  \n                    </div>\n                    `\n\n\n\n                popup.setHTML(description)\n\n                // create DOM element for the marker\n                var el = document.createElement('div');\n                return popup\n            },\n\n            addControlToMap(){\n                map.addControl(\n                    new mapboxgl.GeolocateControl({\n                        positionOptions: {\n                            enableHighAccuracy: true\n                        },\n                        trackUserLocation: true\n                    }),\n                );\n\n                // Add zoom and rotation controls to the map.\n                map.addControl(new mapboxgl.NavigationControl());\n            },\n\n            itsMyPublish(rentUidOwner){\n                return rentUidOwner == this.userLogged.uid\n            },\n\n            /**\n             * Throw events to parents.\n             */\n            confirmForm(){\n                for (const rent of this.rents){\n                    if (rent.pid == window.rentPID){\n                        this.$emit('selectedParking', rent);\n                    }\n                }\n\n            }, \n\n            /**\n             * Throw events to parents.\n             */\n            cancelForm(){\n                this.$emit('closeForm');\n            }, \n        },\n\n    }\n\n</script>\n\n\n<style scoped>\n    #map { \n\n        position: absolute; \n        right: 40px; \n        top: 100px; \n        width: 90%; \n        height: 300px; \n    }\n\n    .bottoms {\n        position: relative;\n        top: 400px;\n    }\n</style>\n\n"]}]}