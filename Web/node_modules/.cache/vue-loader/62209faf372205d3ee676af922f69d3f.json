{"remainingRequest":"/home/javi/Escritorio/TFG/Web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/javi/Escritorio/TFG/Web/src/views/users/actions/emailVerification.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/javi/Escritorio/TFG/Web/src/views/users/actions/emailVerification.vue","mtime":1577210336777},{"path":"/home/javi/Escritorio/TFG/Web/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/javi/Escritorio/TFG/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/javi/Escritorio/TFG/Web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n    // Firebase\n    import {auth} from '@/firebase'\n\n    // Vuex\n    import { mapMutations, mapActions} from 'vuex'\n\n    export default {\n        created(){\n            this.setTopBarName('Verificate Email')\n        },\n\n        computed:{\n\t\t\t/**\n\t\t\t * Determine if a user is logged in the app.\n\t\t\t */\n\t\t\tuser(){\n\t\t\t\treturn auth.currentUser\n            },\n\n\t\t},\n\n        methods: {\n            ...mapMutations('core', ['setTopBarName']),\n            ...mapActions('snackbar', ['showNotificationSuccess', 'showNotificationError']),\n\n            async resendEmail(){\n                await this.user.sendEmailVerification()\n                    .then( () => {\n                        this.showNotificationSuccess({msg: 'We send another message to your email.', timeout:4000, axisY: 'top', axisX: 'center'}) \n                    })\n                    .catch( () => {\n                        this.showNotificationError({msg: 'An error ocurred during sending another message to your email.', timeout:4000, axisY: 'top', axisX: 'center'})\n                    })\n            },\n        }\n\n\n    }\n",{"version":3,"sources":["emailVerification.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA","file":"emailVerification.vue","sourceRoot":"src/views/users/actions","sourcesContent":["<template>\n    <v-container fill-height>\n        <v-row justify=\"center\">\n            <v-col xs=\"10\" md=\"8\">\n                <v-card min-width=\"280\" elevation=\"10\">\n\n                    <v-app-bar color=\"primary\" dark>\n                        <v-row justify=\"center\">\n                            <h1>Confirm your email address.</h1> \n                        </v-row>\n                    </v-app-bar>                    \n\n                    <v-card-text>\n                        <v-row justify=\"center\">\n                            <h3>We send a email to {{user.email}} </h3> \n                        </v-row>\n\n                    </v-card-text>\n\n                    <v-card-actions>   \n                        <v-row justify=\"center\">\n                            <v-btn @click=\"resendEmail\" color=\"secondary\">Resend Email</v-btn>\n                        </v-row>\n                    </v-card-actions>   \n\n                </v-card>\n            </v-col>\n        </v-row>\n    </v-container>\n</template>\n\n<script>\n\n    // Firebase\n    import {auth} from '@/firebase'\n\n    // Vuex\n    import { mapMutations, mapActions} from 'vuex'\n\n    export default {\n        created(){\n            this.setTopBarName('Verificate Email')\n        },\n\n        computed:{\n\t\t\t/**\n\t\t\t * Determine if a user is logged in the app.\n\t\t\t */\n\t\t\tuser(){\n\t\t\t\treturn auth.currentUser\n            },\n\n\t\t},\n\n        methods: {\n            ...mapMutations('core', ['setTopBarName']),\n            ...mapActions('snackbar', ['showNotificationSuccess', 'showNotificationError']),\n\n            async resendEmail(){\n                await this.user.sendEmailVerification()\n                    .then( () => {\n                        this.showNotificationSuccess({msg: 'We send another message to your email.', timeout:4000, axisY: 'top', axisX: 'center'}) \n                    })\n                    .catch( () => {\n                        this.showNotificationError({msg: 'An error ocurred during sending another message to your email.', timeout:4000, axisY: 'top', axisX: 'center'})\n                    })\n            },\n        }\n\n\n    }\n</script>"]}]}