{"remainingRequest":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/javi/Escritorio/TFG - Web/tfg-web/src/views/garaje/organization/Organization-form.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/src/views/garaje/organization/Organization-form.vue","mtime":1580233968489},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n    // Models\n    import organizationUserList from '../../../models/userList/organizationUserList'\n\n    // Components\n    import MapGarajes from '../../../components/maps/MapGarajes'\n\n    // Vuex\n    import { mapMutations, mapActions } from 'vuex'    \n\n    export default {\n        props: ['enableOrganizationForm'],\n\n        components: {MapGarajes},\n\n        data () {\n            return {\n                loadingListOrganizations: true,\n                search: '',\n                headers: [\n                    {\n                        text: 'Name',\n                        align: 'left',\n                        value: 'name',\n                    },\n                    {   \n                        text: 'Free spaces', \n                        value: 'freeSpaces',\n                        align: 'center',\n                    },\n                    {   text: 'Actions',\n                        value: 'action',\n                        sortable: false,\n                        align: 'center',\n                    },\n                ],\n                organizations: [\n            //         {\n            //             name: 'Frozen Yogurt',\n            //             freeSpaces: 159,\n            //             status: false\n            //         },\n            //         {\n            //             name: 'Ice cream sandwich',\n            //             freeSpaces: 232,\n            //             status: false                        \n            //         },\n            //         {\n            //             name: 'Eclair',\n            //             freeSpaces: 500,\n            //             status: false                        \n            //         },\n                ],\n            }\n        },\n\n        created() {\n            this.getAllOrganizationsList()\n        },\n\n        computed:{\n\t\t\t/**\n\t\t\t * Determine if a user is logged in the app.\n\t\t\t */\n\t\t\tuserLogged(){\n\t\t\t\treturn this.$store.state.session.user\n            }\n\n        },\n\n        methods: {\n            ...mapActions('snackbar', ['showNotificationSuccess', 'showNotificationError']),\n\n            disableOrganizationForm() {\n                this.$emit('disableOrganizationForm')\n            },\n\n            async confirmOrganizationForm(){\n                const listOrganizationsToRequest = []\n                for (const org of this.organizations){\n                    if (org.status){\n                        listOrganizationsToRequest.push(org)\n                    }\n                }\n                await this.userLogged.requestInvitation(listOrganizationsToRequest).then( () => {\n                    this.showNotificationSuccess({msg: 'The requests were sent.', timeout:4000, axisY: 'top', axisX: 'center'}) \n                    this.$emit('disableOrganizationForm', true)\n                }).catch( () => {\n                    this.showNotificationError({msg: 'An error ocurred during sending requests.', timeout:4000, axisY: 'top', axisX: 'center'})\n                    this.$emit('disableOrganizationForm', false)\n                })\n                \n            },\n\n            followOrganization(item) {\n                let itemIndex = this.organizations.indexOf(item)\n                console.log(itemIndex)\n                this.organizations[itemIndex].status = true\n            },\n\n            unfollowOrganization(item) {\n                let itemIndex = this.organizations.indexOf(item)\n                console.log(itemIndex)\n                this.organizations[itemIndex].status = false\n            },\n\n            async getAllOrganizationsList(){\n                const organizationList = new organizationUserList()\n                const orgList = await organizationList.getOrganizationList()\n                const userOrganizations = await this.userLogged.getOrganizations()\n                this.loadingListOrganizations = true\n                await this.sleep(1500)\n\n                let userOrganizationsOID = []\n                for (const org of userOrganizations){\n                    userOrganizationsOID.push(org.oid)\n                }\n\n                for (const org of orgList){\n                    if (!userOrganizationsOID.includes(org.oid)){\n                        this.organizations.push({oid: org.oid, name: org.name, status: false})\n                    }\n                }      \n\n                this.loadingListOrganizations = false\n            },\n\n            followOIDFromMap(oidList){\n                for (const oid of oidList){\n                    for (const organization of this.organizations){\n                        if (organization.oid == oid) {\n                            organization.status = true\n                            break\n                        }\n                    }\n                }\n                this.confirmOrganizationForm()\n                \n            },\n\n            /** Simulates a response wait from the backend\n             * @param {Number} ms time to sleep.\n             * @return {Promise}\n             */\n            sleep(ms) {\n                return new Promise(resolve => setTimeout(resolve, ms));\n            }\n        }\n    }\n",{"version":3,"sources":["Organization-form.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"Organization-form.vue","sourceRoot":"src/views/garaje/organization","sourcesContent":["<template>\n    <v-row justify=\"center\">\n        <v-dialog v-model=\"enableOrganizationForm\" persistent max-width=\"900\" >\n\n        <v-card height=\"700\">\n            <v-container>\n                <v-row justify=\"center\">\n                    <v-card-title class=\"headline\">ADD ORGANIZATION</v-card-title>\n                </v-row>\n\n                <v-row>\n\n                    <v-tabs fixed-tabs class=\"mt-2\"> \n                        <v-tab>\n                            <v-icon left>mdi-format-list-bulleted</v-icon>\n                            LIST\n                        </v-tab>\n                        <v-tab>\n                            <v-icon left>mdi-map-search</v-icon>\n                            MAP\n                        </v-tab>\n   \n                        <v-tab-item>\n                            <v-container> \n                                <v-card flat>\n                                    <v-card-title>\n                                        List of Organizations\n                                        <v-spacer></v-spacer>\n                                        <v-text-field\n                                            v-model=\"search\"\n                                            append-icon=\"mdi-magnify\"\n                                            label=\"Search\"\n                                            single-line\n                                            hide-details\n                                        ></v-text-field>                                    \n                                    </v-card-title>\n\n                                    <v-data-table\n                                        :loading=\"loadingListOrganizations\" loading-text=\"Loading... Please wait\"\n                                        :headers=\"headers\"\n                                        :items=\"organizations\"\n                                        :search=\"search\">                                            \n                                            <template v-slot:item.action=\"{ item }\">\n                                                <v-icon v-if=\"!item.status\" @click=\"followOrganization(item)\"> mdi-plus-circle-outline </v-icon>\n                                                <v-icon v-else class=\"ml-12\" @click=\"unfollowOrganization(item)\"> mdi-minus-circle-outline </v-icon>\n                                            </template>\n                                    </v-data-table>\n\n                                    <v-card-actions>\n                                        <v-row justify=\"center\">                        \n                                            <v-btn color=\"red darken-1\" text @click=\"disableOrganizationForm\">Cancel</v-btn>\n                                            <v-btn color=\"green darken-1\" text @click=\"confirmOrganizationForm\">Confirm</v-btn>\n                                        </v-row>\n                                        \n                                    </v-card-actions>\n\n                                </v-card>\n                            </v-container>\n\n\n                        </v-tab-item>\n                        <v-tab-item>\n                            <v-container>\n                                <v-row justify=\"center\">\n                                    <v-col cols=\"10\">\n                                        <MapGarajes :organizations=\"organizations\" @followOIDFromMap=\"followOIDFromMap\" @closeForm=\"disableOrganizationForm\"></MapGarajes>\n                                    </v-col>\n                                </v-row>\n                            </v-container>\n    \n                        </v-tab-item>\n \n                    </v-tabs>\n                </v-row>\n\n            </v-container>\n                   \n        </v-card>\n        </v-dialog>\n    </v-row>\n</template>\n\n<script>\n\n    // Models\n    import organizationUserList from '../../../models/userList/organizationUserList'\n\n    // Components\n    import MapGarajes from '../../../components/maps/MapGarajes'\n\n    // Vuex\n    import { mapMutations, mapActions } from 'vuex'    \n\n    export default {\n        props: ['enableOrganizationForm'],\n\n        components: {MapGarajes},\n\n        data () {\n            return {\n                loadingListOrganizations: true,\n                search: '',\n                headers: [\n                    {\n                        text: 'Name',\n                        align: 'left',\n                        value: 'name',\n                    },\n                    {   \n                        text: 'Free spaces', \n                        value: 'freeSpaces',\n                        align: 'center',\n                    },\n                    {   text: 'Actions',\n                        value: 'action',\n                        sortable: false,\n                        align: 'center',\n                    },\n                ],\n                organizations: [\n            //         {\n            //             name: 'Frozen Yogurt',\n            //             freeSpaces: 159,\n            //             status: false\n            //         },\n            //         {\n            //             name: 'Ice cream sandwich',\n            //             freeSpaces: 232,\n            //             status: false                        \n            //         },\n            //         {\n            //             name: 'Eclair',\n            //             freeSpaces: 500,\n            //             status: false                        \n            //         },\n                ],\n            }\n        },\n\n        created() {\n            this.getAllOrganizationsList()\n        },\n\n        computed:{\n\t\t\t/**\n\t\t\t * Determine if a user is logged in the app.\n\t\t\t */\n\t\t\tuserLogged(){\n\t\t\t\treturn this.$store.state.session.user\n            }\n\n        },\n\n        methods: {\n            ...mapActions('snackbar', ['showNotificationSuccess', 'showNotificationError']),\n\n            disableOrganizationForm() {\n                this.$emit('disableOrganizationForm')\n            },\n\n            async confirmOrganizationForm(){\n                const listOrganizationsToRequest = []\n                for (const org of this.organizations){\n                    if (org.status){\n                        listOrganizationsToRequest.push(org)\n                    }\n                }\n                await this.userLogged.requestInvitation(listOrganizationsToRequest).then( () => {\n                    this.showNotificationSuccess({msg: 'The requests were sent.', timeout:4000, axisY: 'top', axisX: 'center'}) \n                    this.$emit('disableOrganizationForm', true)\n                }).catch( () => {\n                    this.showNotificationError({msg: 'An error ocurred during sending requests.', timeout:4000, axisY: 'top', axisX: 'center'})\n                    this.$emit('disableOrganizationForm', false)\n                })\n                \n            },\n\n            followOrganization(item) {\n                let itemIndex = this.organizations.indexOf(item)\n                console.log(itemIndex)\n                this.organizations[itemIndex].status = true\n            },\n\n            unfollowOrganization(item) {\n                let itemIndex = this.organizations.indexOf(item)\n                console.log(itemIndex)\n                this.organizations[itemIndex].status = false\n            },\n\n            async getAllOrganizationsList(){\n                const organizationList = new organizationUserList()\n                const orgList = await organizationList.getOrganizationList()\n                const userOrganizations = await this.userLogged.getOrganizations()\n                this.loadingListOrganizations = true\n                await this.sleep(1500)\n\n                let userOrganizationsOID = []\n                for (const org of userOrganizations){\n                    userOrganizationsOID.push(org.oid)\n                }\n\n                for (const org of orgList){\n                    if (!userOrganizationsOID.includes(org.oid)){\n                        this.organizations.push({oid: org.oid, name: org.name, status: false})\n                    }\n                }      \n\n                this.loadingListOrganizations = false\n            },\n\n            followOIDFromMap(oidList){\n                for (const oid of oidList){\n                    for (const organization of this.organizations){\n                        if (organization.oid == oid) {\n                            organization.status = true\n                            break\n                        }\n                    }\n                }\n                this.confirmOrganizationForm()\n                \n            },\n\n            /** Simulates a response wait from the backend\n             * @param {Number} ms time to sleep.\n             * @return {Promise}\n             */\n            sleep(ms) {\n                return new Promise(resolve => setTimeout(resolve, ms));\n            }\n        }\n    }\n</script>"]}]}