{"remainingRequest":"/home/javi/Escritorio/TFG/Web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/javi/Escritorio/TFG/Web/src/components/core/SideBar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/javi/Escritorio/TFG/Web/src/components/core/SideBar.vue","mtime":1579951895349},{"path":"/home/javi/Escritorio/TFG/Web/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/javi/Escritorio/TFG/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/javi/Escritorio/TFG/Web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n    // Vuex\n    import { mapMutations } from 'vuex'\n\n    const enabledPersonalUser = 'Personal-User'\n    const enabledOrganizationUser = 'Organization-User'\n    const enabledBothUser = 'User'\n    const disabledUser = 'No-User'\n\n\n\texport default {\n\t\tcomponents: {\n\t\t\t\n\t\t},\n\t\tdata(){\n\t\t\treturn{\n                isSmallDevice: true,\n                optionsMenu: [\n                    { \n                        titulo: 'Sign In', \n                        icono: 'mdi-arrow-right-bold-box', \n                        to: {name: 'login'},\n\n                        activedUser: disabledUser, \n                        action: 'doNothing',                        \n                    },\n                    { \n                        titulo: 'Sign Up', \n                        icono: 'mdi-account-plus', \n                        to: {name: 'register'},\n\n                        activedUser: disabledUser, \n                        action: 'doNothing',                        \n                    },                    \n                    { \n                        titulo: 'Dashboard', \n                        icono: 'mdi-view-dashboard', \n                        to: {name: 'dashboard'},\n\n                        activedUser: enabledBothUser, \n                        action: 'doNothing',                        \n                    },\n                    { \n                        titulo: 'Vehicules', \n                        icono: 'mdi-car-multiple', \n                        to: {name: 'vehicules'} ,\n\n                        activedUser: enabledPersonalUser,\n                        action: 'doNothing',\n\n                    },\n                    { \n                        titulo: 'Garages', \n                        icono: 'mdi-home-city', \n                        to: {name: 'garaje'} ,\n\n                        activedUser: enabledPersonalUser,\n                        action: 'doNothing',\n\n                    },\n                    { \n                        titulo: 'Manage Org.', \n                        icono: 'mdi-account-supervisor', \n                        to: {name: 'ManageCore'} ,\n\n                        activedUser: enabledOrganizationUser,\n                        action: 'doNothing',\n\n                    },                                           \n                    { \n                        titulo: 'Sign Out', \n                        icono: 'mdi-arrow-left-bold-box', \n\n                        activedUser: enabledBothUser,\n                        action: 'signOut'\n                    },                    \n\n                ],\n\t\t\t}\n        },\n\n        created () {\n            // Add listener to event 'resize'.\n            window.addEventListener('resize', this.onResize, { passive: true })\n            this.onResize()\n        },\n\n        computed: {\n            /**\n             * Determine the state of visibleSideBar variable. \n             * I need setter because I use it in a v-model.\n             */\n            visibleSideBar: {\n                get() {\n                    return this.$store.state.core.visibleSideBar\n                },\n                set(value){\n                    if(this.isSmallDevice){\n                        this.setVisibleSideBar(value)\n                    }\n                }\n            },\n\n            /**\n\t\t\t * Determine the user type and if a user is logged in app.\n\t\t\t */\n\t\t\tuserLogged(){\n                let user = this.$store.state.session.user\n                let userType = this.$store.state.session.userType\n                if(!user){\n                    return disabledUser\n                }else{\n                    if (userType == 'personalUser'){\n                        return enabledPersonalUser\n                    }\n                    return enabledOrganizationUser\n                }\n            },\n\n            optionsMenuToShowComputed() {\n                return this.optionsMenuToShowMethod()\n            }\n        \n        },\n        methods: {\n            ...mapMutations('core', ['setVisibleSideBar']),\n\n            optionsMenuToShowMethod(){\n                let optionsMenuEnabled = []\n                for(let optionMenu of this.optionsMenu){\n                    if (optionMenu.activedUser == this.userLogged){\n                        optionsMenuEnabled.push(optionMenu)\n                    }\n                    else if (this.userLogged != disabledUser && optionMenu.activedUser == enabledBothUser){\n                        optionsMenuEnabled.push(optionMenu)\n                    }\n                }\n                return optionsMenuEnabled\n            },\n\n            triggerClick(action){\n                this[action]()\n            },\n\n            doNothing(){},\n\n            signOut(){\n                this.$store.dispatch('session/signOut')\n                this.$router.push({name:'login'})\n            },\n\n            onResize() {\n                this.isSmallDevice = window.innerWidth < 600\n            },\n\n\n        }\n\t};\n",{"version":3,"sources":["SideBar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqFA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA","file":"SideBar.vue","sourceRoot":"src/components/core","sourcesContent":["<template>\n    <span>\n        <!-- Navigation to all devices except small devices -->\n        <v-navigation-drawer \n            v-if=\"!isSmallDevice\"\n            v-model=\"visibleSideBar\"\n            app dark color=\"primary\" \n            bottom\n            :mini-variant.sync=\"visibleSideBar\"\n            permanent\n            >\n\n            <v-list-item two-line>\n                <v-list-item-avatar color=\"white\">\n                    <v-img src='../../assets/core/SideBar/logo.jpg' height=\"34\" contain/>\n                </v-list-item-avatar>\n                <v-list-item-title class=\"title\">\n                    SmartGaraje\n                </v-list-item-title>\n            </v-list-item>\n\n            <v-divider class=\"mx-3 mb-3\" />\n\n            <v-list nav>\n                <v-list-item v-for=\"optionMenu in optionsMenuToShowComputed\" \n                            :key=\"optionMenu.title\"\n                            active-class=\"primary white--text\"\n                            :to=\"optionMenu.to\"\n                            @click=\"triggerClick(optionMenu.action)\"\n                            >\n                    <v-list-item-icon>\n                        <v-icon>{{ optionMenu.icono }}</v-icon>\n                    </v-list-item-icon>\n\n                    <v-list-item-content>\n                        <v-list-item-title>{{ optionMenu.titulo }}</v-list-item-title>\n                    </v-list-item-content>           \n                \n                </v-list-item>\n            </v-list>\n        </v-navigation-drawer>\n\n        <!-- Navigation to small devices -->\n        <v-navigation-drawer \n            v-else\n            v-model=\"visibleSideBar\"\n            app dark color=\"primary\" \n            bottom\n            >\n\n            <v-list-item two-line>\n                <v-list-item-avatar color=\"white\">\n                    <v-img src='../../assets/core/SideBar/logo.jpg' height=\"34\" contain/>\n                </v-list-item-avatar>\n                <v-list-item-title class=\"title\">\n                    SmartGaraje\n                </v-list-item-title>\n            </v-list-item>\n\n            <v-divider class=\"mx-3 mb-3\" />\n\n            <v-list nav>\n                <v-list-item v-for=\"optionMenu in optionsMenuToShowComputed\" \n                            :key=\"optionMenu.title\"\n                            active-class=\"primary white--text\"\n                            :to=\"optionMenu.to\"\n                            @click=\"triggerClick(optionMenu.action)\"\n                            >\n                    <v-list-item-icon>\n                        <v-icon>{{ optionMenu.icono }}</v-icon>\n                    </v-list-item-icon>\n\n                    <v-list-item-content>\n                        <v-list-item-title>{{ optionMenu.titulo }}</v-list-item-title>\n                    </v-list-item-content>           \n                \n                </v-list-item>\n            </v-list>\n        </v-navigation-drawer>        \n    </span>\n</template>\n\n\n<script>\n\n    // Vuex\n    import { mapMutations } from 'vuex'\n\n    const enabledPersonalUser = 'Personal-User'\n    const enabledOrganizationUser = 'Organization-User'\n    const enabledBothUser = 'User'\n    const disabledUser = 'No-User'\n\n\n\texport default {\n\t\tcomponents: {\n\t\t\t\n\t\t},\n\t\tdata(){\n\t\t\treturn{\n                isSmallDevice: true,\n                optionsMenu: [\n                    { \n                        titulo: 'Sign In', \n                        icono: 'mdi-arrow-right-bold-box', \n                        to: {name: 'login'},\n\n                        activedUser: disabledUser, \n                        action: 'doNothing',                        \n                    },\n                    { \n                        titulo: 'Sign Up', \n                        icono: 'mdi-account-plus', \n                        to: {name: 'register'},\n\n                        activedUser: disabledUser, \n                        action: 'doNothing',                        \n                    },                    \n                    { \n                        titulo: 'Dashboard', \n                        icono: 'mdi-view-dashboard', \n                        to: {name: 'dashboard'},\n\n                        activedUser: enabledBothUser, \n                        action: 'doNothing',                        \n                    },\n                    { \n                        titulo: 'Vehicules', \n                        icono: 'mdi-car-multiple', \n                        to: {name: 'vehicules'} ,\n\n                        activedUser: enabledPersonalUser,\n                        action: 'doNothing',\n\n                    },\n                    { \n                        titulo: 'Garages', \n                        icono: 'mdi-home-city', \n                        to: {name: 'garaje'} ,\n\n                        activedUser: enabledPersonalUser,\n                        action: 'doNothing',\n\n                    },\n                    { \n                        titulo: 'Manage Org.', \n                        icono: 'mdi-account-supervisor', \n                        to: {name: 'ManageCore'} ,\n\n                        activedUser: enabledOrganizationUser,\n                        action: 'doNothing',\n\n                    },                                           \n                    { \n                        titulo: 'Sign Out', \n                        icono: 'mdi-arrow-left-bold-box', \n\n                        activedUser: enabledBothUser,\n                        action: 'signOut'\n                    },                    \n\n                ],\n\t\t\t}\n        },\n\n        created () {\n            // Add listener to event 'resize'.\n            window.addEventListener('resize', this.onResize, { passive: true })\n            this.onResize()\n        },\n\n        computed: {\n            /**\n             * Determine the state of visibleSideBar variable. \n             * I need setter because I use it in a v-model.\n             */\n            visibleSideBar: {\n                get() {\n                    return this.$store.state.core.visibleSideBar\n                },\n                set(value){\n                    if(this.isSmallDevice){\n                        this.setVisibleSideBar(value)\n                    }\n                }\n            },\n\n            /**\n\t\t\t * Determine the user type and if a user is logged in app.\n\t\t\t */\n\t\t\tuserLogged(){\n                let user = this.$store.state.session.user\n                let userType = this.$store.state.session.userType\n                if(!user){\n                    return disabledUser\n                }else{\n                    if (userType == 'personalUser'){\n                        return enabledPersonalUser\n                    }\n                    return enabledOrganizationUser\n                }\n            },\n\n            optionsMenuToShowComputed() {\n                return this.optionsMenuToShowMethod()\n            }\n        \n        },\n        methods: {\n            ...mapMutations('core', ['setVisibleSideBar']),\n\n            optionsMenuToShowMethod(){\n                let optionsMenuEnabled = []\n                for(let optionMenu of this.optionsMenu){\n                    if (optionMenu.activedUser == this.userLogged){\n                        optionsMenuEnabled.push(optionMenu)\n                    }\n                    else if (this.userLogged != disabledUser && optionMenu.activedUser == enabledBothUser){\n                        optionsMenuEnabled.push(optionMenu)\n                    }\n                }\n                return optionsMenuEnabled\n            },\n\n            triggerClick(action){\n                this[action]()\n            },\n\n            doNothing(){},\n\n            signOut(){\n                this.$store.dispatch('session/signOut')\n                this.$router.push({name:'login'})\n            },\n\n            onResize() {\n                this.isSmallDevice = window.innerWidth < 600\n            },\n\n\n        }\n\t};\n</script>\n"]}]}