{"remainingRequest":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/javi/Escritorio/TFG - Web/tfg-web/src/views/users/Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/src/views/users/Login.vue","mtime":1576928240561},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// Vuelidate\nimport {required, email} from 'vuelidate/lib/validators'\n\n// Models\nimport User from '../../models/user/user'\n\n// Vuex\nimport { mapActions, mapMutations } from 'vuex'\n\nexport default {\n    data(){\n        return {\n            showPassword: false,\n            loginButtonLoading: false,\n            loginForm: {\n                email: '',\n                password: ''\n            }\n        }\n    },\n\n    created(){\n        this.setTopBarName('Sign In')\n    },\n\n\n    methods: {\n        ...mapMutations('core', ['setTopBarName']),\n        ...mapActions('snackbar', ['showNotificationSuccess', 'showNotificationError']),\n        /**\n         * Check the validity of the form and log in the user.\n         */\n        async login() {\n            if (this.$v.loginForm.$invalid){\n                this.$v.loginForm.$touch()\n            }else{\n                this.loginButtonLoading = true\n                await this.sleep(1000)\n                var user = new User(this.loginForm.email, this.loginForm.password)\n                await user.login()\n                .then(credentials => {\n                    this.loginButtonLoading = false\n                    this.$router.push({ name: 'dashboard' })  \n                    this.showNotificationSuccess({msg: 'Successful login', timeout:4000, axisY: 'top', axisX: 'center'})\n                })\n                .catch(credentials => {\n                    this.loginButtonLoading = false\n                    switch(credentials.code){\n                        case 'auth/invalid-email':\n                        case 'auth/user-not-found':\n                        case 'auth/wrong-password':\n                            this.showNotificationError({msg: 'Password or user invalid', timeout:4000, axisY: 'top', axisX: 'center'})\n                            break\n                    }\n                })\n            }     \n        },\n        /** Simulates a response wait from the backend\n         * @param {Number} ms time to sleep.\n         * @return {Promise}\n         */\n        sleep(ms) {\n            return new Promise(resolve => setTimeout(resolve, ms));\n        }\n    },\n\n\n    validations: {\n        loginForm: {\n            email: {\n                required,   \n                email       \n            },\n            password: {\n                required,\n            }\n        },\n    },\n\n    computed: {\n        /**\n         * Validations for loginForm fields \n         */  \n        emailError() {\n            let error = []\n            \n            if (!this.$v.loginForm.email.$dirty){ return error }\n            else{\n                if (!this.$v.loginForm.email.required){ error.push(\"Email required.\")}\n                if (!this.$v.loginForm.email.email){ error.push(\"Invalid email.\")}\n                return error\n            }\n\n        },\n        passwordError() {\n            let error = []\n            if (!this.$v.loginForm.password.$dirty){ return error}\n            else{\n                if (!this.$v.loginForm.password.required){ error.push(\"Password required.\")}\n                return error\n            }\n\n        },\n\n\n    },        \n\n}\n",{"version":3,"sources":["Login.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;;AAEA","file":"Login.vue","sourceRoot":"src/views/users","sourcesContent":["<template>\n    <v-container fill-height>\n        <v-row justify=\"center\">\n            <v-col xs=\"10\" md=\"8\">\n                <v-card elevation=\"10\">                                    \n                    <v-app-bar color=\"primary\" dark>\n                        <v-row justify=\"center\">\n                            <h1>Login</h1> \n                        </v-row>\n                    </v-app-bar>                    \n\n                    <v-card-text>\n                        <v-text-field label=\"Email\"\n                            outlined prepend-inner-icon=\"mdi-at\"\n                            v-model=\"loginForm.email\"\n                            :error-messages=\"emailError\"\n                            @blur=\"$v.loginForm.email.$touch()\">\n                        </v-text-field>\n                        <v-text-field label=\"Password\" \n                            :type=\"showPassword ? 'text' : 'password'\" \n                            outlined \n                            prepend-inner-icon=\"mdi-textbox-password\" \n                            :append-icon=\"showPassword ? 'mdi-eye' : 'mdi-eye-off'\"  \n                            @click:append=\"showPassword = !showPassword\"\n                            v-model=\"loginForm.password\"\n                            :error-messages=\"passwordError\"\n                            @blur=\"$v.loginForm.password.$touch()\">\n                        </v-text-field>\n                    </v-card-text>\n\n                    <v-card-actions>            \n                        <v-row justify=\"center\">\n                            <v-btn :to=\"{name:'register'}\" color=\"secondary\" class=\"ma-4 form-btn\" >\n                                Sign up\n                            </v-btn>                        \n                            <v-btn @click=\"login()\" :loading=\"loginButtonLoading\"  color=\"secondary\" class=\"ma-4 form-btn\" >\n                                Login\n                            </v-btn>      \n                        </v-row>                                    \n                    </v-card-actions>\n                </v-card>\n            </v-col>\n        </v-row>\n    </v-container>\n</template>\n\n<script>\n    // Vuelidate\n    import {required, email} from 'vuelidate/lib/validators'\n\n    // Models\n    import User from '../../models/user/user'\n\n    // Vuex\n    import { mapActions, mapMutations } from 'vuex'\n\n    export default {\n        data(){\n            return {\n                showPassword: false,\n                loginButtonLoading: false,\n                loginForm: {\n                    email: '',\n                    password: ''\n                }\n            }\n        },\n\n        created(){\n            this.setTopBarName('Sign In')\n        },\n\n\n        methods: {\n            ...mapMutations('core', ['setTopBarName']),\n            ...mapActions('snackbar', ['showNotificationSuccess', 'showNotificationError']),\n            /**\n             * Check the validity of the form and log in the user.\n             */\n            async login() {\n                if (this.$v.loginForm.$invalid){\n                    this.$v.loginForm.$touch()\n                }else{\n                    this.loginButtonLoading = true\n                    await this.sleep(1000)\n                    var user = new User(this.loginForm.email, this.loginForm.password)\n                    await user.login()\n                    .then(credentials => {\n                        this.loginButtonLoading = false\n                        this.$router.push({ name: 'dashboard' })  \n                        this.showNotificationSuccess({msg: 'Successful login', timeout:4000, axisY: 'top', axisX: 'center'})\n                    })\n                    .catch(credentials => {\n                        this.loginButtonLoading = false\n                        switch(credentials.code){\n                            case 'auth/invalid-email':\n                            case 'auth/user-not-found':\n                            case 'auth/wrong-password':\n                                this.showNotificationError({msg: 'Password or user invalid', timeout:4000, axisY: 'top', axisX: 'center'})\n                                break\n                        }\n                    })\n                }     \n            },\n            /** Simulates a response wait from the backend\n             * @param {Number} ms time to sleep.\n             * @return {Promise}\n             */\n            sleep(ms) {\n                return new Promise(resolve => setTimeout(resolve, ms));\n            }\n        },\n\n\n        validations: {\n            loginForm: {\n                email: {\n                    required,   \n                    email       \n                },\n                password: {\n                    required,\n                }\n            },\n        },\n\n        computed: {\n            /**\n             * Validations for loginForm fields \n             */  \n            emailError() {\n                let error = []\n                \n                if (!this.$v.loginForm.email.$dirty){ return error }\n                else{\n                    if (!this.$v.loginForm.email.required){ error.push(\"Email required.\")}\n                    if (!this.$v.loginForm.email.email){ error.push(\"Invalid email.\")}\n                    return error\n                }\n\n            },\n            passwordError() {\n                let error = []\n                if (!this.$v.loginForm.password.$dirty){ return error}\n                else{\n                    if (!this.$v.loginForm.password.required){ error.push(\"Password required.\")}\n                    return error\n                }\n\n            },\n\n\n        },        \n\n    }\n</script>"]}]}