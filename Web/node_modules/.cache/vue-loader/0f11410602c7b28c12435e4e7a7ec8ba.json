{"remainingRequest":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vue-mapbox/src/components/UI/Marker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vue-mapbox/src/components/UI/Marker.vue","mtime":499162500000},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport withEvents from \"../../lib/withEvents\";\nimport withSelfEvents from \"./withSelfEvents\";\n\nconst markerEvents = {\n  drag: \"drag\",\n  dragstart: \"dragstart\",\n  dragend: \"dragend\"\n};\n\nconst markerDOMEvents = {\n  click: \"click\",\n  mouseenter: \"mouseenter\",\n  mouseleave: \"mouseleave\"\n};\n\nexport default {\n  name: \"MapMarker\",\n  mixins: [withEvents, withSelfEvents],\n\n  inject: [\"mapbox\", \"map\"],\n\n  provide() {\n    const self = this;\n    return {\n      get marker() {\n        return self.marker;\n      }\n    };\n  },\n\n  props: {\n    // mapbox marker options\n    offset: {\n      type: [Object, Array],\n      default: () => [0, 0]\n    },\n    coordinates: {\n      type: Array,\n      required: true\n    },\n    color: {\n      type: String\n    },\n    anchor: {\n      type: String,\n      default: \"center\"\n    },\n    draggable: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      initial: true,\n      marker: undefined\n    };\n  },\n\n  watch: {\n    coordinates(lngLat) {\n      if (this.initial) return;\n      this.marker.setLngLat(lngLat);\n    },\n    draggable(next) {\n      if (this.initial) return;\n      this.marker.setDraggable(next);\n    }\n  },\n\n  mounted() {\n    const markerOptions = {\n      ...this.$props\n    };\n    if (this.$slots.marker) {\n      markerOptions.element = this.$slots.marker[0].elm;\n    }\n    this.marker = new this.mapbox.Marker(markerOptions);\n\n    if (this.$listeners[\"update:coordinates\"]) {\n      this.marker.on(\"dragend\", event => {\n        let newCoordinates;\n        if (this.coordinates instanceof Array) {\n          newCoordinates = [event.target._lngLat.lng, event.target._lngLat.lat];\n        } else {\n          newCoordinates = event.target._lngLat;\n        }\n        this.$emit(\"update:coordinates\", newCoordinates);\n      });\n    }\n\n    const eventNames = Object.keys(markerEvents);\n    this.$_bindSelfEvents(eventNames, this.marker);\n\n    this.initial = false;\n    this.$_addMarker();\n  },\n\n  beforeDestroy() {\n    if (this.map !== undefined && this.marker !== undefined) {\n      this.marker.remove();\n    }\n  },\n\n  methods: {\n    $_addMarker() {\n      this.marker.setLngLat(this.coordinates).addTo(this.map);\n      this.$_bindMarkerDOMEvents();\n      this.$_emitEvent(\"added\", { marker: this.marker });\n    },\n\n    $_emitSelfEvent(event) {\n      this.$_emitMapEvent(event, { marker: this.marker });\n    },\n\n    $_bindMarkerDOMEvents() {\n      Object.keys(this.$listeners).forEach(key => {\n        if (Object.values(markerDOMEvents).includes(key)) {\n          this.marker._element.addEventListener(key, event => {\n            this.$_emitSelfEvent(event);\n          });\n        }\n      });\n    },\n\n    remove() {\n      this.marker.remove();\n      this.$_emitEvent(\"removed\");\n    },\n\n    togglePopup() {\n      return this.marker.togglePopup();\n    }\n  }\n};\n",{"version":3,"sources":["Marker.vue"],"names":[],"mappings":";;;;;;;;;;AAUA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Marker.vue","sourceRoot":"node_modules/vue-mapbox/src/components/UI","sourcesContent":["<template>\n  <div style=\"display: none\">\n    <!-- slot for custom marker -->\n    <slot name=\"marker\" />\n    <!-- slot for popup -->\n    <slot v-if=\"marker\" />\n  </div>\n</template>\n\n<script>\nimport withEvents from \"../../lib/withEvents\";\nimport withSelfEvents from \"./withSelfEvents\";\n\nconst markerEvents = {\n  drag: \"drag\",\n  dragstart: \"dragstart\",\n  dragend: \"dragend\"\n};\n\nconst markerDOMEvents = {\n  click: \"click\",\n  mouseenter: \"mouseenter\",\n  mouseleave: \"mouseleave\"\n};\n\nexport default {\n  name: \"MapMarker\",\n  mixins: [withEvents, withSelfEvents],\n\n  inject: [\"mapbox\", \"map\"],\n\n  provide() {\n    const self = this;\n    return {\n      get marker() {\n        return self.marker;\n      }\n    };\n  },\n\n  props: {\n    // mapbox marker options\n    offset: {\n      type: [Object, Array],\n      default: () => [0, 0]\n    },\n    coordinates: {\n      type: Array,\n      required: true\n    },\n    color: {\n      type: String\n    },\n    anchor: {\n      type: String,\n      default: \"center\"\n    },\n    draggable: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return {\n      initial: true,\n      marker: undefined\n    };\n  },\n\n  watch: {\n    coordinates(lngLat) {\n      if (this.initial) return;\n      this.marker.setLngLat(lngLat);\n    },\n    draggable(next) {\n      if (this.initial) return;\n      this.marker.setDraggable(next);\n    }\n  },\n\n  mounted() {\n    const markerOptions = {\n      ...this.$props\n    };\n    if (this.$slots.marker) {\n      markerOptions.element = this.$slots.marker[0].elm;\n    }\n    this.marker = new this.mapbox.Marker(markerOptions);\n\n    if (this.$listeners[\"update:coordinates\"]) {\n      this.marker.on(\"dragend\", event => {\n        let newCoordinates;\n        if (this.coordinates instanceof Array) {\n          newCoordinates = [event.target._lngLat.lng, event.target._lngLat.lat];\n        } else {\n          newCoordinates = event.target._lngLat;\n        }\n        this.$emit(\"update:coordinates\", newCoordinates);\n      });\n    }\n\n    const eventNames = Object.keys(markerEvents);\n    this.$_bindSelfEvents(eventNames, this.marker);\n\n    this.initial = false;\n    this.$_addMarker();\n  },\n\n  beforeDestroy() {\n    if (this.map !== undefined && this.marker !== undefined) {\n      this.marker.remove();\n    }\n  },\n\n  methods: {\n    $_addMarker() {\n      this.marker.setLngLat(this.coordinates).addTo(this.map);\n      this.$_bindMarkerDOMEvents();\n      this.$_emitEvent(\"added\", { marker: this.marker });\n    },\n\n    $_emitSelfEvent(event) {\n      this.$_emitMapEvent(event, { marker: this.marker });\n    },\n\n    $_bindMarkerDOMEvents() {\n      Object.keys(this.$listeners).forEach(key => {\n        if (Object.values(markerDOMEvents).includes(key)) {\n          this.marker._element.addEventListener(key, event => {\n            this.$_emitSelfEvent(event);\n          });\n        }\n      });\n    },\n\n    remove() {\n      this.marker.remove();\n      this.$_emitEvent(\"removed\");\n    },\n\n    togglePopup() {\n      return this.marker.togglePopup();\n    }\n  }\n};\n</script>\n"]}]}