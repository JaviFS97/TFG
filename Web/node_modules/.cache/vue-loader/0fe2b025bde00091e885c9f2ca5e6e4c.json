{"remainingRequest":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/javi/Escritorio/TFG - Web/tfg-web/src/views/users/register/RegisterOrganization.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/src/views/users/register/RegisterOrganization.vue","mtime":1571164003314},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/javi/Escritorio/TFG - Web/tfg-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.form-btn{\n    width: 25%;\n    max-width: 150px;\n    min-width: 75px;\n}\n\n.form-card{\n    width: 80%;\n    min-width: 250px;\n    height: 80%;\n    min-height: 600px;\n}\n\n#v-card-actions{\n    margin-top: 350px;\n}\n",{"version":3,"sources":["RegisterOrganization.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"RegisterOrganization.vue","sourceRoot":"src/views/users/register","sourcesContent":["<template>\n    <v-row justify=\"center\">\n        <v-card class=\"form-card\" flat>\n                            \n            <v-app-bar color=\"primary\" dark>\n                <v-row justify=\"center\">\n                    <h1>Org. info</h1> \n                </v-row>\n            </v-app-bar>                    \n\n            <v-card-text>\n                <v-text-field label=\"Organization name\" \n                    outlined\n                    prepend-inner-icon=\"mdi-format-text\"\n                    v-model=\"organizationForm.name\"\n                    :error-messages=\"nameError\"\n                    @blur=\"$v.organizationForm.name.$touch()\">\n                </v-text-field>\n                <v-text-field label=\"Parking spaces\" \n                    outlined \n                    prepend-inner-icon=\"mdi-boom-gate-up\"\n                    v-model=\"organizationForm.parkingSpaces\"\n                    :error-messages=\"parkingSpacesError\"\n                    @blur=\"$v.organizationForm.parkingSpaces.$touch()\">\n                </v-text-field>\n                <Map @updatedMarkerFromMap=\"updatedMarker\"></Map>     \n            </v-card-text>          \n\n            <v-card-actions id=\"v-card-actions\">            \n                <v-row justify=\"center\">\n                    <v-btn @click=\"beforeView()\" color=\"secondary\" class=\"ma-4 form-btn\" >\n                        BEFORE \n                    </v-btn>                        \n                    <v-btn @click=\"registerOrganizationUser()\" color=\"secondary\" class=\"ma-4 form-btn\" >\n                        Register\n                    </v-btn>      \n                </v-row>                                    \n            </v-card-actions>\n\n        </v-card>\n    </v-row>\n  \n</template>\n\n\n<script>\n/* eslint-disable */ \n    import {required, maxLength, numeric} from 'vuelidate/lib/validators'\n    // Personalized validator that check spaces and accents.\n    const accentAndSpacesValidator = (value) => /^(?! )(?!.* {2})[a-zA-ZáéíóúÁÉÍÓÚüÜñÑ ]+$/.test(value)    \n\n    import Map from '../../../components/maps/MapRegister'\n\n    export default {\n        components: {\n            Map\n        },\n\n        data() {\n            return {\n                organizationForm: {\n                    name: '',\n                    parkingSpaces: '',\n                    garajeDoorCoordenates: '',\n                },\n            }\n        },\n\n        methods: {\n            /**\n             * Throw events to parents.\n             */\n            beforeView() {                \n                this.$emit('beforeViewChield');\n            },\n            registerOrganizationUser() {\n                if (this.$v.organizationForm.$invalid){\n                    this.$v.organizationForm.$touch()\n                }else {\n                    this.$emit('registerOrganization', this.organizationForm);\n                }   \n            },\n\n            /**\n             * Events of childs.\n             */\n            updatedMarker(garajeDoor) {\n                this.organizationForm.garajeDoorCoordenates = garajeDoor._lngLat\n            }\n        },\n\n        validations: {\n            organizationForm: {\n                name: {\n                    required,\n                    accentAndSpacesValidator,\n                    maxLength: maxLength(30)\n                },\n                parkingSpaces: {\n                    required,\n                    numeric\n                },\n            },\n        },\n\n        computed: {\n            /**\n             * Validations for organizationForm fields \n             */  \n            nameError() {\n                let error = []\n                if (!this.$v.organizationForm.name.$dirty){ return error}\n                else {\n                    if (!this.$v.organizationForm.name.required){ error.push(\"Name required.\")}\n                    if (!this.$v.organizationForm.name.maxLength){ error.push(\"Max length 30.\")}\n                    if (!this.$v.organizationForm.name.accentAndSpacesValidator){ error.push(\"Alphabet characters only.\")}\n                    return error\n                }\n            },      \n            parkingSpacesError() {\n                let error = []\n                if (!this.$v.organizationForm.parkingSpaces.$dirty){ return error}\n                else {\n                    if (!this.$v.organizationForm.parkingSpaces.required){ error.push(\"Parking spaces required.\")}\n                    if (!this.$v.organizationForm.parkingSpaces.numeric){ error.push(\"Numbers only\")}\n                    return error\n                }\n            },           \n        }\n\n\n\n    }\n</script>\n\n\n<style>\n    .form-btn{\n        width: 25%;\n        max-width: 150px;\n        min-width: 75px;\n    }\n\n    .form-card{\n        width: 80%;\n        min-width: 250px;\n        height: 80%;\n        min-height: 600px;\n    }\n\n    #v-card-actions{\n        margin-top: 350px;\n    }\n</style>\n"]}]}