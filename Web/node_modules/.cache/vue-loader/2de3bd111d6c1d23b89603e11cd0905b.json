{"remainingRequest":"/home/javi/Escritorio/TFG/Web/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/javi/Escritorio/TFG/Web/src/views/garaje/organization/Organization-rent.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/javi/Escritorio/TFG/Web/src/views/garaje/organization/Organization-rent.vue","mtime":1580839318572},{"path":"/home/javi/Escritorio/TFG/Web/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/javi/Escritorio/TFG/Web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/javi/Escritorio/TFG/Web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n    // Models\n    import PersonalUser from '../../../models/user/personalUser'\n    import RentGarajeSpace from '../../../models/rentGarajeSpace/rentGarajeSpace'\n    \n    // Vuex\n    import { mapMutations, mapActions} from 'vuex'    \n\n    export default {\n        props: ['selectedOrganization'],  \n        data() {\n            return {\n                step: 1,\n                today: null,\n                colors: ['#339933', '#003366', '#ff3300', '#33cccc', '#996633', '#ffcc66', '#ff66cc', '#993366', '#cc00cc', '#666699'],\n                form: {\n                    selectedDates: [],\n                    start: null,\n                    end: null,\n                },\n                rentList: []\n            }\n        },\n\n        created() {\n            this.currentDate()\n            this.getRentsOfParking()\n        },\n\n        computed:{\n\t\t\t/**\n\t\t\t * Determine if a user is logged in the app.\n\t\t\t */\n\t\t\tuserLogged(){\n\t\t\t\treturn this.$store.state.session.user\n            }\n\n        },        \n\n        methods: {\n            ...mapActions('snackbar', ['showNotificationSuccess', 'showNotificationError']),\n\n            functionEvents (date) {\n                //console.log(this.selectedOrganization)\n                this.selectedOrganization.usersRents = []\n\n                for (const rent of this.rentList){\n                    this.selectedOrganization.usersRents.push( {userUID: rent.uidRent, dates: rent.dates })\n                }\n\n                const [yearDate, monthDate, dayDate] = date.split('-')\n\n                let userCount = 0\n                for (const userRent of this.selectedOrganization.usersRents){\n                    for (const userDate of userRent.dates){\n                        const [year, month, day] = userDate.split('-')\n                        if(dayDate == day && monthDate == month && yearDate == year){\n                            return this.colors[userCount]\n                        }\n                    }\n                    userCount += 1\n                }\n            },    \n\n            currentDate() {\n                var today = new Date();\n                var dd = String(today.getDate()).padStart(2, '0');\n                var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n                var yyyy = today.getFullYear();\n\n                this.today = yyyy + '-' + mm + '-' + dd;\n            },\n\n            async publishRent(){\n                await this.userLogged.publishRent(this.selectedOrganization.pid, this.form.selectedDates, this.form.start, this.form.end, this.selectedOrganization.coordenateLAT , this.selectedOrganization.coordenateLNG).then( () => {\n                    this.showNotificationSuccess({msg: 'Published succesfull.', timeout:4000, axisY: 'top', axisX: 'center'}) \n                    this.step = 1\n                }).catch( () => {\n                    this.showNotificationError({msg: 'Error during publising.', timeout:4000, axisY: 'top', axisX: 'center'}) \n                })\n            },\n\n            async getRentsOfParking(){\n                const rentGarajeSpace = new RentGarajeSpace()\n                await rentGarajeSpace.getRentsOfParking(this.selectedOrganization.pid).then( rentList => {\n                    let cont = 0\n                    for (const rent of rentList){\n                        this.rentList.push( {'uidRent': rent.uidRent, 'approvedByOwner': rent.approvedByOwner, 'dates': rent.dates, 'endHour': rent.endHour, 'startHour': rent.startHour, 'color': this.colors[cont], 'index': cont})\n                        cont += 1\n                    }\n                })\n            },\n\n            async acceptRent(rent){\n                const rentGarajeSpace = new RentGarajeSpace()\n                await rentGarajeSpace.acceptRent(rent, this.selectedOrganization.pid)\n                this.rentList.splice(rent.index,1)\n                this.getRentsOfParking()\n            },\n\n            async denyRent(rent){\n                const rentGarajeSpace = new RentGarajeSpace()\n                await rentGarajeSpace.denyRent(rent, this.selectedOrganization.pid)\n                this.rentList.splice(rent.index,1)\n                this.getRentsOfParking()\n            },            \n\n            /** Simulates a response wait from the backend\n             * @param {Number} ms time to sleep.\n             * @return {Promise}\n             */\n            sleep(ms) {\n                return new Promise(resolve => setTimeout(resolve, ms));\n            }\n        }\n    \n    }\n",{"version":3,"sources":["Organization-rent.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"Organization-rent.vue","sourceRoot":"src/views/garaje/organization","sourcesContent":["<template>\n    <v-card flat>\n        <v-container>\n            <v-row justify=\"center\">\n                <v-col cols=\"10\">\n                    <v-stepper v-model=\"step\">\n                        <v-stepper-header>\n                            <v-stepper-step :complete=\"step > 1\" step=\"1\">Date</v-stepper-step>\n                            <v-divider></v-divider>\n                            <v-stepper-step :complete=\"step > 2\" step=\"2\">Start hour</v-stepper-step>\n                            <v-divider></v-divider>\n                            <v-stepper-step :complete=\"step > 3\" step=\"3\">End hour</v-stepper-step>\n                        </v-stepper-header>\n\n                        <v-stepper-items>\n                            <v-stepper-content step=\"1\">\n                                <ul v-for=\"rent in rentList\" :key=\"rent.udiRent\" justify=\"center\">\n                                    <li v-if=\"rent.approvedByOwner\" class=\"mb-2\"> <b :style=\" {color: rent.color }\">Color</b>   | hours: [{{rent.startHour}} - {{rent.endHour}}]</li>\n                                    <li v-else  class=\"mb-2\"> <b :style=\" {color: rent.color }\">Color</b>   | hours: [{{rent.startHour}} - {{rent.endHour}}]  <v-btn small color=\"red\" dark class=\"ml-5 mr-2\" @click=\"denyRent(rent)\">Deny</v-btn> <v-btn small color=\"green\" dark @click=\"acceptRent(rent)\">Accept</v-btn> </li>\n                                    \n                                </ul>\n                                <v-row justify=\"center\" class=\"mt-4\">\n                                    <v-date-picker\n                                        v-model=\"form.selectedDates\"\n                                        multiple\n                                        :event-color=\"date => date[9] % 2 ? 'red' : 'yellow'\"\n                                        :events=\"functionEvents\"\n                                        :min=\"today\"\n                                    ></v-date-picker>\n                                </v-row>\n                                <v-row justify=\"center\" class=\"mt-6\">\n                                    <v-btn @click=\"step += 1\" color=\"primary\" :disabled=\"form.selectedDates.length == 0\"> Next </v-btn>\n                                </v-row>\n                            </v-stepper-content>\n\n                            <v-stepper-content step=\"2\">\n                                <v-row justify=\"center\">\n                                    <h2>Start:</h2>\n                                </v-row>\n                                <v-row justify=\"center\">\n                                    <v-time-picker v-model=\"form.start\" landscape :max=\"form.end\" format=\"24hr\" :event-color=\"date => date[9] % 2 ? 'red' : 'yellow'\" :events=\"functionEvents\"></v-time-picker>\n                                </v-row>\n                                <v-row justify=\"center\" class=\"mt-6\">\n                                    <v-btn @click=\"step -= 1\" color=\"primary\" class=\"mr-6\"> Before </v-btn>\n                                    <v-btn @click=\"step += 1\" color=\"primary\" :disabled=\"!form.start\"> Next </v-btn>\n                                </v-row>\n                            </v-stepper-content>\n                            <v-stepper-content step=\"3\">\n                                <v-row justify=\"center\">\n                                    <h2>End:</h2>\n                                </v-row>\n                                <v-row justify=\"center\">\n                                    <v-time-picker v-model=\"form.end\" landscape :min=\"form.start\" format=\"24hr\"></v-time-picker>                                            \n                                </v-row>\n                                <v-row justify=\"center\" class=\"mt-6\">\n                                    <v-btn @click=\"step -= 1\" color=\"primary\" class=\"mr-6\"> Before </v-btn>\n                                    <v-btn @click=\"publishRent\" color=\"primary\" :disabled=\"!form.end\"> Publish </v-btn>\n                                </v-row>\n                            </v-stepper-content>   \n\n                        </v-stepper-items>\n                    </v-stepper>\n                </v-col>\n            </v-row>\n\n        </v-container>\n    </v-card>\n</template>\n\n\n<script>\n\n    // Models\n    import PersonalUser from '../../../models/user/personalUser'\n    import RentGarajeSpace from '../../../models/rentGarajeSpace/rentGarajeSpace'\n    \n    // Vuex\n    import { mapMutations, mapActions} from 'vuex'    \n\n    export default {\n        props: ['selectedOrganization'],  \n        data() {\n            return {\n                step: 1,\n                today: null,\n                colors: ['#339933', '#003366', '#ff3300', '#33cccc', '#996633', '#ffcc66', '#ff66cc', '#993366', '#cc00cc', '#666699'],\n                form: {\n                    selectedDates: [],\n                    start: null,\n                    end: null,\n                },\n                rentList: []\n            }\n        },\n\n        created() {\n            this.currentDate()\n            this.getRentsOfParking()\n        },\n\n        computed:{\n\t\t\t/**\n\t\t\t * Determine if a user is logged in the app.\n\t\t\t */\n\t\t\tuserLogged(){\n\t\t\t\treturn this.$store.state.session.user\n            }\n\n        },        \n\n        methods: {\n            ...mapActions('snackbar', ['showNotificationSuccess', 'showNotificationError']),\n\n            functionEvents (date) {\n                //console.log(this.selectedOrganization)\n                this.selectedOrganization.usersRents = []\n\n                for (const rent of this.rentList){\n                    this.selectedOrganization.usersRents.push( {userUID: rent.uidRent, dates: rent.dates })\n                }\n\n                const [yearDate, monthDate, dayDate] = date.split('-')\n\n                let userCount = 0\n                for (const userRent of this.selectedOrganization.usersRents){\n                    for (const userDate of userRent.dates){\n                        const [year, month, day] = userDate.split('-')\n                        if(dayDate == day && monthDate == month && yearDate == year){\n                            return this.colors[userCount]\n                        }\n                    }\n                    userCount += 1\n                }\n            },    \n\n            currentDate() {\n                var today = new Date();\n                var dd = String(today.getDate()).padStart(2, '0');\n                var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\n                var yyyy = today.getFullYear();\n\n                this.today = yyyy + '-' + mm + '-' + dd;\n            },\n\n            async publishRent(){\n                await this.userLogged.publishRent(this.selectedOrganization.pid, this.form.selectedDates, this.form.start, this.form.end, this.selectedOrganization.coordenateLAT , this.selectedOrganization.coordenateLNG).then( () => {\n                    this.showNotificationSuccess({msg: 'Published succesfull.', timeout:4000, axisY: 'top', axisX: 'center'}) \n                    this.step = 1\n                }).catch( () => {\n                    this.showNotificationError({msg: 'Error during publising.', timeout:4000, axisY: 'top', axisX: 'center'}) \n                })\n            },\n\n            async getRentsOfParking(){\n                const rentGarajeSpace = new RentGarajeSpace()\n                await rentGarajeSpace.getRentsOfParking(this.selectedOrganization.pid).then( rentList => {\n                    let cont = 0\n                    for (const rent of rentList){\n                        this.rentList.push( {'uidRent': rent.uidRent, 'approvedByOwner': rent.approvedByOwner, 'dates': rent.dates, 'endHour': rent.endHour, 'startHour': rent.startHour, 'color': this.colors[cont], 'index': cont})\n                        cont += 1\n                    }\n                })\n            },\n\n            async acceptRent(rent){\n                const rentGarajeSpace = new RentGarajeSpace()\n                await rentGarajeSpace.acceptRent(rent, this.selectedOrganization.pid)\n                this.rentList.splice(rent.index,1)\n                this.getRentsOfParking()\n            },\n\n            async denyRent(rent){\n                const rentGarajeSpace = new RentGarajeSpace()\n                await rentGarajeSpace.denyRent(rent, this.selectedOrganization.pid)\n                this.rentList.splice(rent.index,1)\n                this.getRentsOfParking()\n            },            \n\n            /** Simulates a response wait from the backend\n             * @param {Number} ms time to sleep.\n             * @return {Promise}\n             */\n            sleep(ms) {\n                return new Promise(resolve => setTimeout(resolve, ms));\n            }\n        }\n    \n    }\n</script>"]}]}